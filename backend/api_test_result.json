{
  "success": true,
  "data": {
    "success": true,
    "summary": {
      "total_functions": 54,
      "total_classes": 0,
      "total_files": 58,
      "processing_time": 0.06982684135437012
    },
    "function_analysis": {
      "contexts": [
        {
          "name": "Skeleton",
          "implementation": {
            "source": "function Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}",
            "filepath": "frontend/components/ui/skeleton.tsx"
          },
          "dependencies": [
            {
              "name": "cn",
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            }
          ],
          "usages": [
            {
              "source": "const SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "import { Skeleton } from \"@/components/ui/skeleton\"",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "export { Skeleton }",
              "filepath": "frontend/components/ui/skeleton.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 1,
          "function_calls": 1,
          "call_sites": 0
        },
        {
          "name": "useIsMobile",
          "implementation": {
            "source": "export function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}",
            "filepath": "frontend/components/ui/use-mobile.tsx"
          },
          "dependencies": [
            {
              "name": "* as React",
              "source": "import * as React from \"react\"",
              "filepath": ""
            },
            {
              "name": "MOBILE_BREAKPOINT",
              "source": "const MOBILE_BREAKPOINT = 768",
              "filepath": "frontend/components/ui/use-mobile.tsx"
            },
            {
              "name": "mql",
              "source": "const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)",
              "filepath": "frontend/components/ui/use-mobile.tsx"
            },
            {
              "name": "onChange",
              "source": "const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }",
              "filepath": "frontend/components/ui/use-mobile.tsx"
            }
          ],
          "usages": [
            {
              "source": "export function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}",
              "filepath": "frontend/components/ui/use-mobile.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 7,
          "call_sites": 0
        },
        {
          "name": "useIsMobile",
          "implementation": {
            "source": "export function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}",
            "filepath": "frontend/hooks/use-mobile.tsx"
          },
          "dependencies": [
            {
              "name": "* as React",
              "source": "import * as React from \"react\"",
              "filepath": ""
            },
            {
              "name": "MOBILE_BREAKPOINT",
              "source": "const MOBILE_BREAKPOINT = 768",
              "filepath": "frontend/hooks/use-mobile.tsx"
            },
            {
              "name": "mql",
              "source": "const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)",
              "filepath": "frontend/hooks/use-mobile.tsx"
            },
            {
              "name": "onChange",
              "source": "const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }",
              "filepath": "frontend/hooks/use-mobile.tsx"
            }
          ],
          "usages": [
            {
              "source": "const SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "import { useIsMobile } from \"@/hooks/use-mobile\"",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "export function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}",
              "filepath": "frontend/hooks/use-mobile.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 7,
          "call_sites": 1
        },
        {
          "name": "cn",
          "implementation": {
            "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
            "filepath": "frontend/lib/utils.ts"
          },
          "dependencies": [
            {
              "name": "ClassValue",
              "source": "import { clsx, type ClassValue } from \"clsx\"",
              "filepath": ""
            },
            {
              "name": "clsx",
              "source": "import { clsx, type ClassValue } from \"clsx\"",
              "filepath": ""
            },
            {
              "name": "twMerge",
              "source": "import { twMerge } from \"tailwind-merge\"",
              "filepath": ""
            }
          ],
          "usages": [
            {
              "source": "const SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})",
              "filepath": "frontend/components/ui/carousel.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})",
              "filepath": "frontend/components/ui/carousel.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "const SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "const CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/carousel.tsx"
            },
            {
              "source": "const DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "const SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "const FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})",
              "filepath": "frontend/components/ui/form.tsx"
            },
            {
              "source": "const CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})",
              "filepath": "frontend/components/ui/carousel.tsx"
            },
            {
              "source": "const CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "const NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "const DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "const MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "const ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/form.tsx"
            },
            {
              "source": "const ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "const Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/carousel.tsx"
            },
            {
              "source": "const AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "const DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "const CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "const AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "const DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "const NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "const SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "const ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "const FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/form.tsx"
            },
            {
              "source": "const PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "const AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "const SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "const TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "const BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "const SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "const FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})",
              "filepath": "frontend/components/ui/form.tsx"
            },
            {
              "source": "const DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "const TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))",
              "filepath": "frontend/components/ui/accordion.tsx"
            },
            {
              "source": "const MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)",
              "filepath": "frontend/components/ui/button.tsx"
            },
            {
              "source": "const BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "const PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "const CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "const DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/tabs.tsx"
            },
            {
              "source": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/calendar.tsx"
            },
            {
              "source": "const TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "const AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert.tsx"
            },
            {
              "source": "const ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})",
              "filepath": "frontend/components/ui/toggle-group.tsx"
            },
            {
              "source": "const Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toggle.tsx"
            },
            {
              "source": "const BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "const PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})",
              "filepath": "frontend/components/ui/input-otp.tsx"
            },
            {
              "source": "const DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "const AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/avatar.tsx"
            },
            {
              "source": "const DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "const TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "const MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert.tsx"
            },
            {
              "source": "const ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))",
              "filepath": "frontend/components/ui/scroll-area.tsx"
            },
            {
              "source": "const NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "function Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}",
              "filepath": "frontend/components/ui/badge.tsx"
            },
            {
              "source": "const BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "const PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))",
              "filepath": "frontend/components/ui/accordion.tsx"
            },
            {
              "source": "const DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "const TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "const Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))",
              "filepath": "frontend/components/ui/switch.tsx"
            },
            {
              "source": "const RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})",
              "filepath": "frontend/components/ui/radio-group.tsx"
            },
            {
              "source": "const TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/tabs.tsx"
            },
            {
              "source": "const Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/alert.tsx"
            },
            {
              "source": "const Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/checkbox.tsx"
            },
            {
              "source": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/calendar.tsx"
            },
            {
              "source": "const CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "const AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/avatar.tsx"
            },
            {
              "source": "const InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))",
              "filepath": "frontend/components/ui/input-otp.tsx"
            },
            {
              "source": "const DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "const ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/toggle-group.tsx"
            },
            {
              "source": "const ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)",
              "filepath": "frontend/components/ui/resizable.tsx"
            },
            {
              "source": "const Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "const PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "const AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "const PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))",
              "filepath": "frontend/components/ui/popover.tsx"
            },
            {
              "source": "const Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/label.tsx"
            },
            {
              "source": "const DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "const BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "const TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "const HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/hover-card.tsx"
            },
            {
              "source": "const SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "const TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/tooltip.tsx"
            },
            {
              "source": "const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "const ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "const Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)",
              "filepath": "frontend/components/ui/separator.tsx"
            },
            {
              "source": "const Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "const InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/input-otp.tsx"
            },
            {
              "source": "const NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/calendar.tsx"
            },
            {
              "source": "const AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/accordion.tsx"
            },
            {
              "source": "const RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/radio-group.tsx"
            },
            {
              "source": "const Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/checkbox.tsx"
            },
            {
              "source": "const ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/scroll-area.tsx"
            },
            {
              "source": "const InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/input-otp.tsx"
            },
            {
              "source": "const TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/tabs.tsx"
            },
            {
              "source": "const Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/progress.tsx"
            },
            {
              "source": "const Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))",
              "filepath": "frontend/components/ui/slider.tsx"
            },
            {
              "source": "const Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/avatar.tsx"
            },
            {
              "source": "const Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))",
              "filepath": "frontend/components/ui/switch.tsx"
            },
            {
              "source": "const Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "const ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)",
              "filepath": "frontend/components/ui/resizable.tsx"
            },
            {
              "source": "const Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/form.tsx"
            },
            {
              "source": "const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)",
              "filepath": "frontend/components/ui/input.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/sidebar.tsx"
            },
            {
              "source": "const Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/textarea.tsx"
            },
            {
              "source": "const Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/sheet.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/navigation-menu.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/command.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/carousel.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/toggle-group.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/dropdown-menu.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/context-menu.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/toggle.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/label.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/select.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/menubar.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/accordion.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/radio-group.tsx"
            },
            {
              "source": "function Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}",
              "filepath": "frontend/components/ui/skeleton.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/calendar.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/checkbox.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/button.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/breadcrumb.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/input-otp.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/resizable.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/alert-dialog.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/scroll-area.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/hover-card.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/separator.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/progress.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/tooltip.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/popover.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/switch.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/slider.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/avatar.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/tabs.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/badge.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/alert.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/textarea.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/table.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/input.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/card.tsx"
            },
            {
              "source": "import { cn } from \"@/lib/utils\"",
              "filepath": "frontend/components/ui/skeleton.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 1,
          "function_calls": 2,
          "call_sites": 196
        },
        {
          "name": "ThemeProvider",
          "implementation": {
            "source": "export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
            "filepath": "frontend/components/theme-provider.tsx"
          },
          "dependencies": [
            {
              "name": "ThemeProvider",
              "source": "import { ThemeProvider as NextThemesProvider } from \"next-themes\"",
              "filepath": ""
            },
            {
              "name": "ThemeProviderProps",
              "source": "import type { ThemeProviderProps } from \"next-themes\"",
              "filepath": ""
            }
          ],
          "usages": [
            {
              "source": "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem disableTransitionOnChange>\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}",
              "filepath": "frontend/app/layout.tsx"
            },
            {
              "source": "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem disableTransitionOnChange>\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}",
              "filepath": "frontend/app/layout.tsx"
            },
            {
              "source": "export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
              "filepath": "frontend/components/theme-provider.tsx"
            },
            {
              "source": "import { ThemeProvider } from \"@/components/theme-provider\"",
              "filepath": "frontend/app/layout.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 1,
          "function_calls": 0,
          "call_sites": 0
        },
        {
          "name": "Drawer",
          "implementation": {
            "source": "const Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)",
            "filepath": "frontend/components/ui/drawer.tsx"
          },
          "dependencies": [
            {
              "name": "Drawer",
              "source": "import { Drawer as DrawerPrimitive } from \"vaul\"",
              "filepath": ""
            }
          ],
          "usages": [
            {
              "source": "export {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "Drawer.displayName = \"Drawer\"",
              "filepath": "frontend/components/ui/drawer.tsx"
            },
            {
              "source": "Drawer.displayName = \"Drawer\"",
              "filepath": "frontend/components/ui/drawer.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 0,
          "function_calls": 0,
          "call_sites": 0
        },
        {
          "name": "Toaster",
          "implementation": {
            "source": "const Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}",
            "filepath": "frontend/components/ui/sonner.tsx"
          },
          "dependencies": [
            {
              "name": "useTheme",
              "source": "import { useTheme } from \"next-themes\"",
              "filepath": ""
            },
            {
              "name": "Toaster",
              "source": "import { Toaster as Sonner } from \"sonner\"",
              "filepath": ""
            },
            {
              "name": "ToasterProps",
              "source": "type ToasterProps = React.ComponentProps<typeof Sonner>",
              "filepath": "frontend/components/ui/sonner.tsx"
            }
          ],
          "usages": [
            {
              "source": "export { Toaster }",
              "filepath": "frontend/components/ui/sonner.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 1,
          "call_sites": 0
        },
        {
          "name": "ResizablePanelGroup",
          "implementation": {
            "source": "const ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)",
            "filepath": "frontend/components/ui/resizable.tsx"
          },
          "dependencies": [
            {
              "name": "* as ResizablePrimitive",
              "source": "import * as ResizablePrimitive from \"react-resizable-panels\"",
              "filepath": ""
            },
            {
              "name": "cn",
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            }
          ],
          "usages": [
            {
              "source": "export { ResizablePanelGroup, ResizablePanel, ResizableHandle }",
              "filepath": "frontend/components/ui/resizable.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 0,
          "function_calls": 1,
          "call_sites": 0
        },
        {
          "name": "Toaster",
          "implementation": {
            "source": "export function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}",
            "filepath": "frontend/components/ui/toaster.tsx"
          },
          "dependencies": [
            {
              "name": "useToast",
              "source": "function useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}",
              "filepath": "frontend/hooks/use-toast.ts"
            },
            {
              "name": "ToastProvider",
              "source": "const ToastProvider = ToastPrimitives.Provider",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "name": "ToastViewport",
              "source": "const ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "name": "Toast",
              "source": "const Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "name": "ToastClose",
              "source": "const ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "name": "ToastDescription",
              "source": "const ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "name": "ToastTitle",
              "source": "const ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/toast.tsx"
            },
            {
              "name": "id",
              "source": "id",
              "filepath": "frontend/components/ui/toaster.tsx"
            },
            {
              "name": "title",
              "source": "title",
              "filepath": "frontend/components/ui/toaster.tsx"
            },
            {
              "name": "description",
              "source": "description",
              "filepath": "frontend/components/ui/toaster.tsx"
            },
            {
              "name": "action",
              "source": "action",
              "filepath": "frontend/components/ui/toaster.tsx"
            }
          ],
          "usages": [
            {
              "source": "export function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}",
              "filepath": "frontend/components/ui/toaster.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 2,
          "call_sites": 0
        },
        {
          "name": "Pagination",
          "implementation": {
            "source": "const Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)",
            "filepath": "frontend/components/ui/pagination.tsx"
          },
          "dependencies": [
            {
              "name": "cn",
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            }
          ],
          "usages": [
            {
              "source": "export {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "Pagination.displayName = \"Pagination\"",
              "filepath": "frontend/components/ui/pagination.tsx"
            },
            {
              "source": "Pagination.displayName = \"Pagination\"",
              "filepath": "frontend/components/ui/pagination.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 0,
          "function_calls": 1,
          "call_sites": 0
        },
        {
          "name": "Page",
          "implementation": {
            "source": "export default function Page() {\n  return <RepoAnalyticsDashboard />\n}",
            "filepath": "frontend/app/page.tsx"
          },
          "dependencies": [
            {
              "name": "repo-analytics-dashboard",
              "source": "\"use client\"\n\nimport { useState } from \"react\"\nimport { BarChart3, Code2, FileCode2, GitBranch, Github, Settings, MessageSquare, FileText, Code, RefreshCcw, PaintBucket, Brain } from \"lucide-react\"\nimport { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from \"recharts\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\n\nconst mockRepoData = {\n  name: \"vercel/next.js\",\n  description: \"The React Framework for the Web\",\n  linesOfCode: 154321,\n  cyclomaticComplexity: 15.7,\n  depthOfInheritance: 3.2,\n  halsteadVolume: 987654,\n  maintainabilityIndex: 85,\n  commentDensity: 18.5,\n  sloc: 132456,\n  lloc: 98765,\n  numberOfFiles: 1200,\n  numberOfFunctions: 4500,\n  numberOfClasses: 300,\n}\n\nconst mockCommitData = [\n  { month: \"October\", commits: 130 },\n  { month: \"September\", commits: 150 },\n  { month: \"August\", commits: 120 },\n  { month: \"July\", commits: 110 },\n  { month: \"June\", commits: 140 },\n  { month: \"May\", commits: 160 },\n  { month: \"April\", commits: 170 },\n  { month: \"March\", commits: 180 },\n  { month: \"February\", commits: 190 },\n  { month: \"January\", commits: 200 },\n  { month: \"December\", commits: 210 },\n  { month: \"November\", commits: 220 },\n];\n\ninterface RepoAnalyticsResponse {\n  repo_url: string;\n  line_metrics: {\n    total: {\n      loc: number;\n      lloc: number;\n      sloc: number;\n      comments: number;\n      comment_density: number;\n    }\n  };\n  cyclomatic_complexity: { average: number };\n  depth_of_inheritance: { average: number };\n  halstead_metrics: { \n    total_volume: number;\n    average_volume: number;\n  };\n  maintainability_index: { average: number };\n  description: string;\n  num_files: number;\n  num_functions: number;\n  num_classes: number;\n  monthly_commits: Record<string, number>;\n}\n\ninterface RepoData {\n  name: string;\n  description: string;\n  linesOfCode: number;\n  cyclomaticComplexity: number;\n  depthOfInheritance: number;\n  halsteadVolume: number;\n  maintainabilityIndex: number;\n  commentDensity: number;\n  sloc: number;\n  lloc: number;\n  numberOfFiles: number;\n  numberOfFunctions: number;\n  numberOfClasses: number;\n}\n\nexport default function RepoAnalyticsDashboard() {\n  const [repoUrl, setRepoUrl] = useState(\"\")\n  const [repoData, setRepoData] = useState(mockRepoData)\n  const [hoveredCard, setHoveredCard] = useState<string | null>(null)\n  const [commitData, setCommitData] = useState(mockCommitData)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isLandingPage, setIsLandingPage] = useState(true)\n\n  const parseRepoUrl = (input: string): string => {\n    if (input.includes('github.com')) {\n      const url = new URL(input);\n      const pathParts = url.pathname.split('/').filter(Boolean);\n      if (pathParts.length >= 2) {\n        return `${pathParts[0]}/${pathParts[1]}`;\n      }\n    }\n    return input;\n  };\n\n  const handleFetchRepo = async () => {\n    console.log(\"Fetching repo data...\");\n    \n    const parsedRepoUrl = parseRepoUrl(repoUrl);\n    console.log(parsedRepoUrl);\n    \n    setIsLoading(true);\n    setIsLandingPage(false);\n    \n    try {\n      console.log(\"Fetching repo data...\");\n      // https://codegen-sh-staging--analytics-app-fastapi-modal-app.modal.run/analyze_repo\n      // https://codegen-sh-staging--analytics-app-fastapi-modal-app-dev.modal.run/analyze_repo\n      const response = await fetch('https://zeeeepa--analytics-app-fastapi-modal-app-dev.modal.run/analyze_repo', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ repo_url: parsedRepoUrl }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data: RepoAnalyticsResponse = await response.json();\n      \n      setRepoData({\n        name: parsedRepoUrl,\n        description: data.description,\n        linesOfCode: data.line_metrics.total.loc,\n        cyclomaticComplexity: data.cyclomatic_complexity.average,\n        depthOfInheritance: data.depth_of_inheritance.average,\n        halsteadVolume: data.halstead_metrics.total_volume,\n        maintainabilityIndex: data.maintainability_index.average,\n        commentDensity: data.line_metrics.total.comment_density,\n        sloc: data.line_metrics.total.sloc,\n        lloc: data.line_metrics.total.lloc,\n        numberOfFiles: data.num_files,\n        numberOfFunctions: data.num_functions,\n        numberOfClasses: data.num_classes,\n      });\n\n      const transformedCommitData = Object.entries(data.monthly_commits)\n        .map(([date, commits]) => ({\n          month: new Date(date).toLocaleString('default', { month: 'long' }),\n          commits,\n        }))\n        .slice(0, 12)\n        .reverse();\n\n      setCommitData(transformedCommitData);\n    } catch (error) {\n      console.error('Error fetching repo data:', error);\n      alert('Error fetching repository data. Please check the URL and try again.');\n      setIsLandingPage(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleMouseEnter = (cardName: string) => {\n    setHoveredCard(cardName)\n  }\n\n  const handleMouseLeave = () => {\n    setHoveredCard(null)\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleFetchRepo(); \n    }\n  }\n\nfunction calculateCodebaseGrade(data: RepoData) {\n  const { maintainabilityIndex } = data;\n  \n  if (maintainabilityIndex >= 90) return 'A+';\n  if (maintainabilityIndex >= 85) return 'A';\n  if (maintainabilityIndex >= 80) return 'A-';\n  if (maintainabilityIndex >= 75) return 'B+';\n  if (maintainabilityIndex >= 70) return 'B';\n  if (maintainabilityIndex >= 65) return 'B-';\n  if (maintainabilityIndex >= 60) return 'C+';\n  if (maintainabilityIndex >= 55) return 'C';\n  if (maintainabilityIndex >= 50) return 'C-';\n  if (maintainabilityIndex >= 45) return 'D+';\n  if (maintainabilityIndex >= 40) return 'D';\n  return 'F';\n}\n\n\n\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {isLandingPage ? (\n        <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold flex items-center justify-center gap-3 mb-4\">\n              <img src=\"cg.png\" alt=\"CG Logo\" className=\"h-12 w-12\" />\n              <span>Codebase Analytics</span>\n            </h1>\n            <p className=\"text-muted-foreground\">Effortlessly calculate GitHub repository metrics in seconds</p>\n          </div>\n          <div className=\"flex items-center gap-3 w-full max-w-lg\">\n            <Input\n              type=\"text\"\n              placeholder=\"Enter the GitHub repo link or owner/repo\"\n              value={repoUrl}\n              onChange={(e) => setRepoUrl(e.target.value)}\n              onKeyPress={handleKeyPress}\n              className=\"flex-1\"\n              title=\"Format: https://github.com/owner/repo or owner/repo\"\n            />\n            <Button \n              onClick={handleFetchRepo} \n              disabled={isLoading}\n            >\n              {isLoading ? \"Loading...\" : \"Analyze\"}\n            </Button>\n          </div>\n          <footer className=\"absolute bottom-0 w-full text-center text-xs text-muted-foreground py-4\">\n            built with <a href=\"https://codegen.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-primary\">Codegen</a>\n          </footer>\n        </div>\n      ) : isLoading ? (\n        <div className=\"flex flex-col items-center justify-center min-h-screen\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl font-bold mb-4\">Analyzing Repository</h2>\n            <p className=\"text-muted-foreground\">Please wait while we calculate codebase metrics with Codegen...</p>\n          </div>\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n        </div>\n      ) : (\n        <div className=\"flex flex-col min-h-screen\">\n          <header className=\"sticky top-0 z-10 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <div className=\"w-full px-8 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-shrink-0\">\n                  <h1\n                    className=\"text-2xl font-bold flex items-center space-x-3 cursor-pointer\"\n                    onClick={() => window.location.reload()}\n                  >\n                    <img src=\"cg.png\" alt=\"CG Logo\" className=\"h-8 w-8\" />\n                    <span>Codebase Analytics</span>\n                  </h1>\n                </div>\n                <div className=\"flex items-center gap-3 ml-auto\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter the GitHub repo link or owner/repo\"\n                    value={repoUrl}\n                    onChange={(e) => setRepoUrl(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    className=\"w-[320px]\"\n                    title=\"Format: https://github.com/owner/repo or owner/repo\"\n                  />\n                  <Button onClick={handleFetchRepo} disabled={isLoading}>\n                    {isLoading ? \"Loading...\" : \"Analyze\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </header>\n          <main className=\"p-6 flex-grow\">\n            <div className=\"grid mb-5 gap-6 grid-cols-1\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Repository</CardTitle>\n                  <Github className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <a href={`https://github.com/${repoData.name}`} target=\"_blank\" rel=\"noopener noreferrer\" className=\"block\">\n                    <div className=\"text-2xl font-bold\">{repoData.name}</div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{repoData.description}</p>\n                  </a>\n                  <div className=\"flex flex-wrap mt-4 gap-4\">\n                    <div className=\"flex items-center\">\n                      <FileCode2 className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                      <span className=\"text-sm font-medium\">{repoData.numberOfFiles.toLocaleString()} Files</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Code className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                      <span className=\"text-sm font-medium\">{repoData.numberOfFunctions.toLocaleString()} Functions</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <BarChart3 className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                      <span className=\"text-sm font-medium\">{repoData.numberOfClasses.toLocaleString()} Classes</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            <div className=\"grid gap-6 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-4\">\n              <Card onMouseEnter={() => handleMouseEnter('Maintainability Index')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Maintainability Index</CardTitle>\n                  <Settings className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.maintainabilityIndex}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'Maintainability Index' ? 'This evaluates how easy it is to understand, modify, and maintain a codebase (ranging from 0 to 100).' : 'Code maintainability score (0-100)'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('Cyclomatic Complexity')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Cyclomatic Complexity</CardTitle>\n                  <RefreshCcw className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.cyclomaticComplexity.toFixed(1)}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'Cyclomatic Complexity' ? 'This measures the number of independent paths through a program\\'s source code' : 'Average complexity score'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('Halstead Volume')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Halstead Volume</CardTitle>\n                  <PaintBucket className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.halsteadVolume.toLocaleString()}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'Halstead Volume' ? 'This quantifies the amount of information in a program by measuring the size and complexity of its code using operators and operands.' : 'Code volume metric'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('Depth of Inheritance')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Depth of Inheritance</CardTitle>\n                  <GitBranch className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.depthOfInheritance.toFixed(1)}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'Depth of Inheritance' ? 'This is the average measure of the number of classes that a class inherits from.' : 'Average inheritance depth'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('Lines of Code')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Lines of Code</CardTitle>\n                  <Code2 className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.linesOfCode.toLocaleString()}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'Lines of Code' ? 'This is the total number of lines of code within this codebase.' : 'Total lines in the repository'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('SLOC')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">SLOC</CardTitle>\n                  <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.sloc.toLocaleString()}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'SLOC' ? 'This is the number of textual lines of code within the codebase, ignoring whitespace and comments.' : 'Source Lines of Code'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('LLOC')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">LLOC</CardTitle>\n                  <Brain className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.lloc.toLocaleString()}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'LLOC' ? 'This is the number of lines of code that contribute to executable statements in the codebase.' : 'Logical Lines of Code'}\n                  </p>\n                </CardContent>\n              </Card>\n              <Card onMouseEnter={() => handleMouseEnter('Comment Density')} onMouseLeave={handleMouseLeave}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Comment Density</CardTitle>\n                  <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{repoData.commentDensity.toFixed(1)}%</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {hoveredCard === 'Comment Density' ? 'This is the percentage of the lines in the codebase that are comments.' : 'Percentage of comments in code'}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Monthly Commits</CardTitle>\n                <CardDescription>Number of commits, batched by month over the past year</CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-4\">\n                <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={commitData}>\n                    <XAxis dataKey=\"month\" stroke=\"#888888\" />\n                    <YAxis stroke=\"#888888\" />\n                    <Bar dataKey=\"commits\" fill=\"#2563eb\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card className=\"mt-6\">\n                <CardContent className=\"pt-5 flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Codebase Grade</CardTitle>\n                    <CardDescription>Overall grade based on code metrics</CardDescription>\n                  </div>\n                  <div className=\"text-4xl font-bold text-right\">\n                    {calculateCodebaseGrade(repoData)}\n                  </div>\n                </CardContent>\n              </Card>\n              <Card className=\"mt-6\">\n                <CardContent className=\"pt-5 flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Codebase Complexity</CardTitle>\n                    <CardDescription>Judgment based on size and complexity</CardDescription>\n                  </div>\n                  <div className=\"text-2xl font-bold text-right\">\n                  {repoData.numberOfFiles > 1000 ? \"Large\" : \"Moderate\"}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </main>\n          <footer className=\"w-full text-center text-xs text-muted-foreground py-4\">\n          built with <a href=\"https://codegen.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-primary\">Codegen</a>\n          </footer>\n        </div>\n      )}\n    </div>\n  )\n}\n",
              "filepath": "frontend/components/repo-analytics-dashboard.tsx"
            }
          ],
          "usages": [
            {
              "source": "export default function Page() {\n  return <RepoAnalyticsDashboard />\n}",
              "filepath": "frontend/app/page.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 0,
          "call_sites": 0
        },
        {
          "name": "Calendar",
          "implementation": {
            "source": "function Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}",
            "filepath": "frontend/components/ui/calendar.tsx"
          },
          "dependencies": [
            {
              "name": "ChevronRight",
              "source": "import { ChevronLeft, ChevronRight } from \"lucide-react\"",
              "filepath": ""
            },
            {
              "name": "ChevronLeft",
              "source": "import { ChevronLeft, ChevronRight } from \"lucide-react\"",
              "filepath": ""
            },
            {
              "name": "DayPicker",
              "source": "import { DayPicker } from \"react-day-picker\"",
              "filepath": ""
            },
            {
              "name": "cn",
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            },
            {
              "name": "buttonVariants",
              "source": "const buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)",
              "filepath": "frontend/components/ui/button.tsx"
            },
            {
              "name": "CalendarProps",
              "source": "export type CalendarProps = React.ComponentProps<typeof DayPicker>",
              "filepath": "frontend/components/ui/calendar.tsx"
            }
          ],
          "usages": [
            {
              "source": "export { Calendar }",
              "filepath": "frontend/components/ui/calendar.tsx"
            },
            {
              "source": "Calendar.displayName = \"Calendar\"",
              "filepath": "frontend/components/ui/calendar.tsx"
            },
            {
              "source": "Calendar.displayName = \"Calendar\"",
              "filepath": "frontend/components/ui/calendar.tsx"
            }
          ],
          "parameters": 3,
          "return_statements": 1,
          "function_calls": 5,
          "call_sites": 0
        },
        {
          "name": "RootLayout",
          "implementation": {
            "source": "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem disableTransitionOnChange>\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}",
            "filepath": "frontend/app/layout.tsx"
          },
          "dependencies": [
            {
              "name": "ThemeProvider",
              "source": "export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
              "filepath": "frontend/components/theme-provider.tsx"
            }
          ],
          "usages": [
            {
              "source": "export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem disableTransitionOnChange>\n          {children}\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}",
              "filepath": "frontend/app/layout.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 1,
          "function_calls": 0,
          "call_sites": 0
        },
        {
          "name": "ResizableHandle",
          "implementation": {
            "source": "const ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)",
            "filepath": "frontend/components/ui/resizable.tsx"
          },
          "dependencies": [
            {
              "name": "GripVertical",
              "source": "import { GripVertical } from \"lucide-react\"",
              "filepath": ""
            },
            {
              "name": "* as ResizablePrimitive",
              "source": "import * as ResizablePrimitive from \"react-resizable-panels\"",
              "filepath": ""
            },
            {
              "name": "cn",
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            }
          ],
          "usages": [
            {
              "source": "export { ResizablePanelGroup, ResizablePanel, ResizableHandle }",
              "filepath": "frontend/components/ui/resizable.tsx"
            }
          ],
          "parameters": 2,
          "return_statements": 0,
          "function_calls": 1,
          "call_sites": 0
        },
        {
          "name": "genId",
          "implementation": {
            "source": "function genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}",
            "filepath": "frontend/components/ui/use-toast.ts"
          },
          "dependencies": [
            {
              "name": "count",
              "source": "let count = 0",
              "filepath": "frontend/components/ui/use-toast.ts"
            }
          ],
          "usages": [
            {
              "source": "function toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}",
              "filepath": "frontend/components/ui/use-toast.ts"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 1,
          "call_sites": 1
        },
        {
          "name": "genId",
          "implementation": {
            "source": "function genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}",
            "filepath": "frontend/hooks/use-toast.ts"
          },
          "dependencies": [
            {
              "name": "count",
              "source": "let count = 0",
              "filepath": "frontend/hooks/use-toast.ts"
            }
          ],
          "usages": [
            {
              "source": "function toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}",
              "filepath": "frontend/hooks/use-toast.ts"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 1,
          "call_sites": 1
        },
        {
          "name": "useChart",
          "implementation": {
            "source": "function useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}",
            "filepath": "frontend/components/ui/chart.tsx"
          },
          "dependencies": [
            {
              "name": "* as React",
              "source": "import * as React from \"react\"",
              "filepath": ""
            },
            {
              "name": "ChartContext",
              "source": "const ChartContext = React.createContext<ChartContextProps | null>(null)",
              "filepath": "frontend/components/ui/chart.tsx"
            }
          ],
          "usages": [
            {
              "source": "const ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            },
            {
              "source": "const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)",
              "filepath": "frontend/components/ui/chart.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 2,
          "call_sites": 2
        },
        {
          "name": "FormField",
          "implementation": {
            "source": "const FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}",
            "filepath": "frontend/components/ui/form.tsx"
          },
          "dependencies": [
            {
              "name": "Controller",
              "source": "import {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"",
              "filepath": ""
            },
            {
              "name": "FormFieldContext",
              "source": "const FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)",
              "filepath": "frontend/components/ui/form.tsx"
            }
          ],
          "usages": [
            {
              "source": "export {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}",
              "filepath": "frontend/components/ui/form.tsx"
            }
          ],
          "parameters": 0,
          "return_statements": 1,
          "function_calls": 0,
          "call_sites": 0
        },
        {
          "name": "CommandDialog",
          "implementation": {
            "source": "const CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}",
            "filepath": "frontend/components/ui/command.tsx"
          },
          "dependencies": [
            {
              "name": "DialogProps",
              "source": "import { type DialogProps } from \"@radix-ui/react-dialog\"",
              "filepath": ""
            },
            {
              "name": "Dialog",
              "source": "const Dialog = DialogPrimitive.Root",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "name": "DialogContent",
              "source": "const DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))",
              "filepath": "frontend/components/ui/dialog.tsx"
            },
            {
              "name": "Command",
              "source": "const Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))",
              "filepath": "frontend/components/ui/command.tsx"
            }
          ],
          "usages": [
            {
              "source": "export {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}",
              "filepath": "frontend/components/ui/command.tsx"
            }
          ],
          "parameters": 1,
          "return_statements": 1,
          "function_calls": 0,
          "call_sites": 0
        },
        {
          "name": "Badge",
          "implementation": {
            "source": "function Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}",
            "filepath": "frontend/components/ui/badge.tsx"
          },
          "dependencies": [
            {
              "name": "cn",
              "source": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
              "filepath": "frontend/lib/utils.ts"
            },
            {
              "name": "badgeVariants",
              "source": "const badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)",
              "filepath": "frontend/components/ui/badge.tsx"
            },
            {
              "name": "BadgeProps",
              "source": "export interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}",
              "filepath": "frontend/components/ui/badge.tsx"
            }
          ],
          "usages": [
            {
              "source": "export { Badge, badgeVariants }",
              "filepath": "frontend/components/ui/badge.tsx"
            }
          ],
          "parameters": 2,
          "return_statements": 1,
          "function_calls": 2,
          "call_sites": 0
        }
      ],
      "most_important": [
        {
          "name": "cn",
          "call_sites": 196,
          "filepath": "frontend/lib/utils.ts",
          "importance_score": 198
        },
        {
          "name": "dispatch",
          "call_sites": 5,
          "filepath": "frontend/components/ui/use-toast.ts",
          "importance_score": 8
        },
        {
          "name": "dispatch",
          "call_sites": 5,
          "filepath": "frontend/hooks/use-toast.ts",
          "importance_score": 8
        },
        {
          "name": "useCarousel",
          "call_sites": 4,
          "filepath": "frontend/components/ui/carousel.tsx",
          "importance_score": 6
        },
        {
          "name": "useFormField",
          "call_sites": 4,
          "filepath": "frontend/components/ui/form.tsx",
          "importance_score": 9
        },
        {
          "name": "useSidebar",
          "call_sites": 4,
          "filepath": "frontend/components/ui/sidebar.tsx",
          "importance_score": 6
        },
        {
          "name": "getPayloadConfigFromPayload",
          "call_sites": 3,
          "filepath": "frontend/components/ui/chart.tsx",
          "importance_score": 3
        },
        {
          "name": "useChart",
          "call_sites": 2,
          "filepath": "frontend/components/ui/chart.tsx",
          "importance_score": 4
        },
        {
          "name": "addToRemoveQueue",
          "call_sites": 2,
          "filepath": "frontend/components/ui/use-toast.ts",
          "importance_score": 7
        },
        {
          "name": "addToRemoveQueue",
          "call_sites": 2,
          "filepath": "frontend/hooks/use-toast.ts",
          "importance_score": 7
        }
      ],
      "entry_points": [],
      "dead_functions": [
        {
          "name": "Skeleton",
          "filepath": "frontend/components/ui/skeleton.tsx",
          "line_number": 2,
          "reason": "No call sites found"
        },
        {
          "name": "useIsMobile",
          "filepath": "frontend/components/ui/use-mobile.tsx",
          "line_number": 4,
          "reason": "No call sites found"
        },
        {
          "name": "ThemeProvider",
          "filepath": "frontend/components/theme-provider.tsx",
          "line_number": 4,
          "reason": "No call sites found"
        },
        {
          "name": "Drawer",
          "filepath": "frontend/components/ui/drawer.tsx",
          "line_number": 7,
          "reason": "No call sites found"
        },
        {
          "name": "Toaster",
          "filepath": "frontend/components/ui/sonner.tsx",
          "line_number": 7,
          "reason": "No call sites found"
        },
        {
          "name": "ResizablePanelGroup",
          "filepath": "frontend/components/ui/resizable.tsx",
          "line_number": 7,
          "reason": "No call sites found"
        },
        {
          "name": "Toaster",
          "filepath": "frontend/components/ui/toaster.tsx",
          "line_number": 12,
          "reason": "No call sites found"
        },
        {
          "name": "Pagination",
          "filepath": "frontend/components/ui/pagination.tsx",
          "line_number": 6,
          "reason": "No call sites found"
        },
        {
          "name": "Page",
          "filepath": "frontend/app/page.tsx",
          "line_number": 8,
          "reason": "No call sites found"
        },
        {
          "name": "Calendar",
          "filepath": "frontend/components/ui/calendar.tsx",
          "line_number": 11,
          "reason": "No call sites found"
        },
        {
          "name": "RootLayout",
          "filepath": "frontend/app/layout.tsx",
          "line_number": 11,
          "reason": "No call sites found"
        },
        {
          "name": "ResizableHandle",
          "filepath": "frontend/components/ui/resizable.tsx",
          "line_number": 22,
          "reason": "No call sites found"
        },
        {
          "name": "FormField",
          "filepath": "frontend/components/ui/form.tsx",
          "line_number": 30,
          "reason": "No call sites found"
        },
        {
          "name": "CommandDialog",
          "filepath": "frontend/components/ui/command.tsx",
          "line_number": 25,
          "reason": "No call sites found"
        },
        {
          "name": "Badge",
          "filepath": "frontend/components/ui/badge.tsx",
          "line_number": 29,
          "reason": "No call sites found"
        },
        {
          "name": "PaginationLink",
          "filepath": "frontend/components/ui/pagination.tsx",
          "line_number": 41,
          "reason": "No call sites found"
        },
        {
          "name": "PaginationPrevious",
          "filepath": "frontend/components/ui/pagination.tsx",
          "line_number": 61,
          "reason": "No call sites found"
        },
        {
          "name": "DrawerHeader",
          "filepath": "frontend/components/ui/drawer.tsx",
          "line_number": 57,
          "reason": "No call sites found"
        },
        {
          "name": "DrawerFooter",
          "filepath": "frontend/components/ui/drawer.tsx",
          "line_number": 68,
          "reason": "No call sites found"
        },
        {
          "name": "BreadcrumbSeparator",
          "filepath": "frontend/components/ui/breadcrumb.tsx",
          "line_number": 74,
          "reason": "No call sites found"
        },
        {
          "name": "PaginationNext",
          "filepath": "frontend/components/ui/pagination.tsx",
          "line_number": 77,
          "reason": "No call sites found"
        },
        {
          "name": "AlertDialogHeader",
          "filepath": "frontend/components/ui/alert-dialog.tsx",
          "line_number": 47,
          "reason": "No call sites found"
        },
        {
          "name": "BreadcrumbEllipsis",
          "filepath": "frontend/components/ui/breadcrumb.tsx",
          "line_number": 90,
          "reason": "No call sites found"
        },
        {
          "name": "AlertDialogFooter",
          "filepath": "frontend/components/ui/alert-dialog.tsx",
          "line_number": 61,
          "reason": "No call sites found"
        },
        {
          "name": "RepoAnalyticsDashboard",
          "filepath": "frontend/components/repo-analytics-dashboard.tsx",
          "line_number": 82,
          "reason": "No call sites found"
        },
        {
          "name": "PaginationEllipsis",
          "filepath": "frontend/components/ui/pagination.tsx",
          "line_number": 93,
          "reason": "No call sites found"
        },
        {
          "name": "ChartStyle",
          "filepath": "frontend/components/ui/chart.tsx",
          "line_number": 69,
          "reason": "No call sites found"
        },
        {
          "name": "DialogHeader",
          "filepath": "frontend/components/ui/dialog.tsx",
          "line_number": 55,
          "reason": "No call sites found"
        },
        {
          "name": "DialogFooter",
          "filepath": "frontend/components/ui/dialog.tsx",
          "line_number": 69,
          "reason": "No call sites found"
        },
        {
          "name": "SheetHeader",
          "filepath": "frontend/components/ui/sheet.tsx",
          "line_number": 76,
          "reason": "No call sites found"
        },
        {
          "name": "toast",
          "filepath": "frontend/components/ui/use-toast.ts",
          "line_number": 144,
          "reason": "No call sites found"
        },
        {
          "name": "toast",
          "filepath": "frontend/hooks/use-toast.ts",
          "line_number": 144,
          "reason": "No call sites found"
        },
        {
          "name": "SheetFooter",
          "filepath": "frontend/components/ui/sheet.tsx",
          "line_number": 90,
          "reason": "No call sites found"
        },
        {
          "name": "useToast",
          "filepath": "frontend/components/ui/use-toast.ts",
          "line_number": 173,
          "reason": "No call sites found"
        },
        {
          "name": "CommandShortcut",
          "filepath": "frontend/components/ui/command.tsx",
          "line_number": 126,
          "reason": "No call sites found"
        },
        {
          "name": "ContextMenuShortcut",
          "filepath": "frontend/components/ui/context-menu.tsx",
          "line_number": 167,
          "reason": "No call sites found"
        },
        {
          "name": "DropdownMenuShortcut",
          "filepath": "frontend/components/ui/dropdown-menu.tsx",
          "line_number": 170,
          "reason": "No call sites found"
        },
        {
          "name": "MenubarShortcut",
          "filepath": "frontend/components/ui/menubar.tsx",
          "line_number": 202,
          "reason": "No call sites found"
        }
      ]
    },
    "quality_metrics": {
      "halstead_metrics": [
        {
          "vocabulary": 14,
          "length": 14,
          "volume": 53.302968908806456,
          "difficulty": 6.0,
          "effort": 319.8178134528387,
          "function_name": "Skeleton"
        },
        {
          "vocabulary": 18,
          "length": 19,
          "volume": 79.22857502740393,
          "difficulty": 8.5,
          "effort": 673.4428877329334,
          "function_name": "useIsMobile"
        },
        {
          "vocabulary": 18,
          "length": 19,
          "volume": 79.22857502740393,
          "difficulty": 8.5,
          "effort": 673.4428877329334,
          "function_name": "useIsMobile"
        },
        {
          "vocabulary": 15,
          "length": 15,
          "volume": 58.60335893412778,
          "difficulty": 6.5,
          "effort": 380.9218330718306,
          "function_name": "cn"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 5.5,
          "effort": 264.58143984708806,
          "function_name": "ThemeProvider"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 5.5,
          "effort": 264.58143984708806,
          "function_name": "Drawer"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 6.0,
          "effort": 288.6342980150052,
          "function_name": "Toaster"
        },
        {
          "vocabulary": 14,
          "length": 14,
          "volume": 53.302968908806456,
          "difficulty": 6.0,
          "effort": 319.8178134528387,
          "function_name": "ResizablePanelGroup"
        },
        {
          "vocabulary": 14,
          "length": 14,
          "volume": 53.302968908806456,
          "difficulty": 6.5,
          "effort": 346.469297907242,
          "function_name": "Toaster"
        },
        {
          "vocabulary": 14,
          "length": 14,
          "volume": 53.302968908806456,
          "difficulty": 6.0,
          "effort": 319.8178134528387,
          "function_name": "Pagination"
        },
        {
          "vocabulary": 12,
          "length": 12,
          "volume": 43.01955000865387,
          "difficulty": 5.5,
          "effort": 236.6075250475963,
          "function_name": "Page"
        },
        {
          "vocabulary": 17,
          "length": 20,
          "volume": 81.74925682500678,
          "difficulty": 6.5,
          "effort": 531.3701693625441,
          "function_name": "Calendar"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 5.5,
          "effort": 264.58143984708806,
          "function_name": "RootLayout"
        },
        {
          "vocabulary": 15,
          "length": 15,
          "volume": 58.60335893412778,
          "difficulty": 6.0,
          "effort": 351.6201536047667,
          "function_name": "ResizableHandle"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 6.0,
          "effort": 288.6342980150052,
          "function_name": "genId"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 6.0,
          "effort": 288.6342980150052,
          "function_name": "genId"
        },
        {
          "vocabulary": 14,
          "length": 14,
          "volume": 53.302968908806456,
          "difficulty": 6.5,
          "effort": 346.469297907242,
          "function_name": "useChart"
        },
        {
          "vocabulary": 12,
          "length": 12,
          "volume": 43.01955000865387,
          "difficulty": 5.5,
          "effort": 236.6075250475963,
          "function_name": "FormField"
        },
        {
          "vocabulary": 13,
          "length": 13,
          "volume": 48.105716335834195,
          "difficulty": 5.5,
          "effort": 264.58143984708806,
          "function_name": "CommandDialog"
        },
        {
          "vocabulary": 16,
          "length": 16,
          "volume": 64.0,
          "difficulty": 6.5,
          "effort": 416.0,
          "function_name": "Badge"
        }
      ],
      "issues": {
        "total_issues": 58,
        "by_severity": {
          "critical": 0,
          "high": 4,
          "medium": 54,
          "low": 0
        },
        "by_type": {
          "missing_documentation": 54,
          "long_function": 4,
          "too_many_parameters": 0
        },
        "details": [
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Skeleton' lacks documentation",
            "file": "frontend/components/ui/skeleton.tsx",
            "line": 2
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useIsMobile' lacks documentation",
            "file": "frontend/components/ui/use-mobile.tsx",
            "line": 4
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useIsMobile' lacks documentation",
            "file": "frontend/hooks/use-mobile.tsx",
            "line": 4
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'cn' lacks documentation",
            "file": "frontend/lib/utils.ts",
            "line": 3
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'ThemeProvider' lacks documentation",
            "file": "frontend/components/theme-provider.tsx",
            "line": 4
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Drawer' lacks documentation",
            "file": "frontend/components/ui/drawer.tsx",
            "line": 7
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Toaster' lacks documentation",
            "file": "frontend/components/ui/sonner.tsx",
            "line": 7
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'ResizablePanelGroup' lacks documentation",
            "file": "frontend/components/ui/resizable.tsx",
            "line": 7
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Toaster' lacks documentation",
            "file": "frontend/components/ui/toaster.tsx",
            "line": 12
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Pagination' lacks documentation",
            "file": "frontend/components/ui/pagination.tsx",
            "line": 6
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Page' lacks documentation",
            "file": "frontend/app/page.tsx",
            "line": 8
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Calendar' lacks documentation",
            "file": "frontend/components/ui/calendar.tsx",
            "line": 11
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'RootLayout' lacks documentation",
            "file": "frontend/app/layout.tsx",
            "line": 11
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'ResizableHandle' lacks documentation",
            "file": "frontend/components/ui/resizable.tsx",
            "line": 22
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'genId' lacks documentation",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 29
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'genId' lacks documentation",
            "file": "frontend/hooks/use-toast.ts",
            "line": 29
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useChart' lacks documentation",
            "file": "frontend/components/ui/chart.tsx",
            "line": 26
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'FormField' lacks documentation",
            "file": "frontend/components/ui/form.tsx",
            "line": 30
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'CommandDialog' lacks documentation",
            "file": "frontend/components/ui/command.tsx",
            "line": 25
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'Badge' lacks documentation",
            "file": "frontend/components/ui/badge.tsx",
            "line": 29
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useCarousel' lacks documentation",
            "file": "frontend/components/ui/carousel.tsx",
            "line": 34
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useFormField' lacks documentation",
            "file": "frontend/components/ui/form.tsx",
            "line": 43
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'PaginationLink' lacks documentation",
            "file": "frontend/components/ui/pagination.tsx",
            "line": 41
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'addToRemoveQueue' lacks documentation",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 60
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'addToRemoveQueue' lacks documentation",
            "file": "frontend/hooks/use-toast.ts",
            "line": 60
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useSidebar' lacks documentation",
            "file": "frontend/components/ui/sidebar.tsx",
            "line": 40
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'reducer' lacks documentation",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 76
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'reducer' lacks documentation",
            "file": "frontend/hooks/use-toast.ts",
            "line": 76
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'PaginationPrevious' lacks documentation",
            "file": "frontend/components/ui/pagination.tsx",
            "line": 61
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'DrawerHeader' lacks documentation",
            "file": "frontend/components/ui/drawer.tsx",
            "line": 57
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'DrawerFooter' lacks documentation",
            "file": "frontend/components/ui/drawer.tsx",
            "line": 68
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'BreadcrumbSeparator' lacks documentation",
            "file": "frontend/components/ui/breadcrumb.tsx",
            "line": 74
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'PaginationNext' lacks documentation",
            "file": "frontend/components/ui/pagination.tsx",
            "line": 77
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'AlertDialogHeader' lacks documentation",
            "file": "frontend/components/ui/alert-dialog.tsx",
            "line": 47
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'BreadcrumbEllipsis' lacks documentation",
            "file": "frontend/components/ui/breadcrumb.tsx",
            "line": 90
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'AlertDialogFooter' lacks documentation",
            "file": "frontend/components/ui/alert-dialog.tsx",
            "line": 61
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'RepoAnalyticsDashboard' lacks documentation",
            "file": "frontend/components/repo-analytics-dashboard.tsx",
            "line": 82
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'PaginationEllipsis' lacks documentation",
            "file": "frontend/components/ui/pagination.tsx",
            "line": 93
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'ChartStyle' lacks documentation",
            "file": "frontend/components/ui/chart.tsx",
            "line": 69
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'DialogHeader' lacks documentation",
            "file": "frontend/components/ui/dialog.tsx",
            "line": 55
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'DialogFooter' lacks documentation",
            "file": "frontend/components/ui/dialog.tsx",
            "line": 69
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'SheetHeader' lacks documentation",
            "file": "frontend/components/ui/sheet.tsx",
            "line": 76
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'dispatch' lacks documentation",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 135
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'dispatch' lacks documentation",
            "file": "frontend/hooks/use-toast.ts",
            "line": 135
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'toast' lacks documentation",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 144
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'toast' lacks documentation",
            "file": "frontend/hooks/use-toast.ts",
            "line": 144
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'SheetFooter' lacks documentation",
            "file": "frontend/components/ui/sheet.tsx",
            "line": 90
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useToast' lacks documentation",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 173
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'useToast' lacks documentation",
            "file": "frontend/hooks/use-toast.ts",
            "line": 173
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'CommandShortcut' lacks documentation",
            "file": "frontend/components/ui/command.tsx",
            "line": 126
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'ContextMenuShortcut' lacks documentation",
            "file": "frontend/components/ui/context-menu.tsx",
            "line": 167
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'DropdownMenuShortcut' lacks documentation",
            "file": "frontend/components/ui/dropdown-menu.tsx",
            "line": 170
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'MenubarShortcut' lacks documentation",
            "file": "frontend/components/ui/menubar.tsx",
            "line": 202
          },
          {
            "type": "missing_documentation",
            "severity": "medium",
            "message": "Function 'getPayloadConfigFromPayload' lacks documentation",
            "file": "frontend/components/ui/chart.tsx",
            "line": 319
          },
          {
            "type": "long_function",
            "severity": "high",
            "message": "Function 'Calendar' is too long (52 lines)",
            "file": "frontend/components/ui/calendar.tsx",
            "line": 11
          },
          {
            "type": "long_function",
            "severity": "high",
            "message": "Function 'reducer' is too long (54 lines)",
            "file": "frontend/components/ui/use-toast.ts",
            "line": 76
          },
          {
            "type": "long_function",
            "severity": "high",
            "message": "Function 'reducer' is too long (54 lines)",
            "file": "frontend/hooks/use-toast.ts",
            "line": 76
          },
          {
            "type": "long_function",
            "severity": "high",
            "message": "Function 'RepoAnalyticsDashboard' is too long (361 lines)",
            "file": "frontend/components/repo-analytics-dashboard.tsx",
            "line": 82
          }
        ]
      },
      "health_assessment": {
        "health_score": 60,
        "health_grade": "D",
        "risk_level": "High",
        "technical_debt_hours": 62.0,
        "total_functions": 54,
        "total_classes": 0,
        "total_files": 58,
        "total_issues": 58
      }
    },
    "repository_structure": {
      "total_files": 58,
      "file_types": {
        "no_extension": 57,
        ".config": 1
      },
      "directories": [
        "frontend/components",
        "frontend/app",
        "frontend/hooks",
        "frontend/components/ui",
        "frontend/lib",
        "frontend"
      ],
      "largest_files": [
        {
          "name": "sidebar",
          "path": "frontend/components/ui/sidebar.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 17,
          "lines_of_code": 764
        },
        {
          "name": "repo-analytics-dashboard",
          "path": "frontend/components/repo-analytics-dashboard.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 25,
          "lines_of_code": 444
        },
        {
          "name": "chart",
          "path": "frontend/components/ui/chart.tsx",
          "classes": 0,
          "functions": 3,
          "imports": 3,
          "lines_of_code": 366
        },
        {
          "name": "carousel",
          "path": "frontend/components/ui/carousel.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 7,
          "lines_of_code": 263
        },
        {
          "name": "menubar",
          "path": "frontend/components/ui/menubar.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 237
        },
        {
          "name": "context-menu",
          "path": "frontend/components/ui/context-menu.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 201
        },
        {
          "name": "dropdown-menu",
          "path": "frontend/components/ui/dropdown-menu.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 201
        },
        {
          "name": "use-toast",
          "path": "frontend/components/ui/use-toast.ts",
          "classes": 0,
          "functions": 6,
          "imports": 3,
          "lines_of_code": 195
        },
        {
          "name": "use-toast",
          "path": "frontend/hooks/use-toast.ts",
          "classes": 0,
          "functions": 6,
          "imports": 3,
          "lines_of_code": 195
        },
        {
          "name": "form",
          "path": "frontend/components/ui/form.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 11,
          "lines_of_code": 179
        }
      ],
      "file_details": [
        {
          "name": "sidebar",
          "path": "frontend/components/ui/sidebar.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 17,
          "lines_of_code": 764
        },
        {
          "name": "repo-analytics-dashboard",
          "path": "frontend/components/repo-analytics-dashboard.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 25,
          "lines_of_code": 444
        },
        {
          "name": "chart",
          "path": "frontend/components/ui/chart.tsx",
          "classes": 0,
          "functions": 3,
          "imports": 3,
          "lines_of_code": 366
        },
        {
          "name": "carousel",
          "path": "frontend/components/ui/carousel.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 7,
          "lines_of_code": 263
        },
        {
          "name": "menubar",
          "path": "frontend/components/ui/menubar.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 237
        },
        {
          "name": "context-menu",
          "path": "frontend/components/ui/context-menu.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 201
        },
        {
          "name": "dropdown-menu",
          "path": "frontend/components/ui/dropdown-menu.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 201
        },
        {
          "name": "use-toast",
          "path": "frontend/components/ui/use-toast.ts",
          "classes": 0,
          "functions": 6,
          "imports": 3,
          "lines_of_code": 195
        },
        {
          "name": "use-toast",
          "path": "frontend/hooks/use-toast.ts",
          "classes": 0,
          "functions": 6,
          "imports": 3,
          "lines_of_code": 195
        },
        {
          "name": "form",
          "path": "frontend/components/ui/form.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 11,
          "lines_of_code": 179
        },
        {
          "name": "select",
          "path": "frontend/components/ui/select.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 6,
          "lines_of_code": 161
        },
        {
          "name": "command",
          "path": "frontend/components/ui/command.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 7,
          "lines_of_code": 154
        },
        {
          "name": "alert-dialog",
          "path": "frontend/components/ui/alert-dialog.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 4,
          "lines_of_code": 142
        },
        {
          "name": "sheet",
          "path": "frontend/components/ui/sheet.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 6,
          "lines_of_code": 141
        },
        {
          "name": "toast",
          "path": "frontend/components/ui/toast.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 6,
          "lines_of_code": 130
        },
        {
          "name": "navigation-menu",
          "path": "frontend/components/ui/navigation-menu.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 5,
          "lines_of_code": 129
        },
        {
          "name": "dialog",
          "path": "frontend/components/ui/dialog.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 4,
          "lines_of_code": 123
        },
        {
          "name": "drawer",
          "path": "frontend/components/ui/drawer.tsx",
          "classes": 0,
          "functions": 3,
          "imports": 3,
          "lines_of_code": 119
        },
        {
          "name": "pagination",
          "path": "frontend/components/ui/pagination.tsx",
          "classes": 0,
          "functions": 5,
          "imports": 7,
          "lines_of_code": 118
        },
        {
          "name": "table",
          "path": "frontend/components/ui/table.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 2,
          "lines_of_code": 118
        },
        {
          "name": "breadcrumb",
          "path": "frontend/components/ui/breadcrumb.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 5,
          "lines_of_code": 116
        },
        {
          "name": "tailwind.config",
          "path": "frontend/tailwind.config.ts",
          "classes": 0,
          "functions": 0,
          "imports": 2,
          "lines_of_code": 100
        },
        {
          "name": "card",
          "path": "frontend/components/ui/card.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 2,
          "lines_of_code": 80
        },
        {
          "name": "input-otp",
          "path": "frontend/components/ui/input-otp.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 5,
          "lines_of_code": 72
        },
        {
          "name": "calendar",
          "path": "frontend/components/ui/calendar.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 6,
          "lines_of_code": 67
        },
        {
          "name": "toggle-group",
          "path": "frontend/components/ui/toggle-group.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 5,
          "lines_of_code": 62
        },
        {
          "name": "alert",
          "path": "frontend/components/ui/alert.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 4,
          "lines_of_code": 60
        },
        {
          "name": "accordion",
          "path": "frontend/components/ui/accordion.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 4,
          "lines_of_code": 59
        },
        {
          "name": "button",
          "path": "frontend/components/ui/button.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 5,
          "lines_of_code": 57
        },
        {
          "name": "tabs",
          "path": "frontend/components/ui/tabs.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 56
        },
        {
          "name": "avatar",
          "path": "frontend/components/ui/avatar.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 51
        },
        {
          "name": "scroll-area",
          "path": "frontend/components/ui/scroll-area.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 49
        },
        {
          "name": "resizable",
          "path": "frontend/components/ui/resizable.tsx",
          "classes": 0,
          "functions": 2,
          "imports": 3,
          "lines_of_code": 46
        },
        {
          "name": "toggle",
          "path": "frontend/components/ui/toggle.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 5,
          "lines_of_code": 46
        },
        {
          "name": "radio-group",
          "path": "frontend/components/ui/radio-group.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 4,
          "lines_of_code": 45
        },
        {
          "name": "badge",
          "path": "frontend/components/ui/badge.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 4,
          "lines_of_code": 37
        },
        {
          "name": "toaster",
          "path": "frontend/components/ui/toaster.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 7,
          "lines_of_code": 36
        },
        {
          "name": "popover",
          "path": "frontend/components/ui/popover.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 32
        },
        {
          "name": "separator",
          "path": "frontend/components/ui/separator.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 32
        },
        {
          "name": "sonner",
          "path": "frontend/components/ui/sonner.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 2,
          "lines_of_code": 32
        },
        {
          "name": "checkbox",
          "path": "frontend/components/ui/checkbox.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 4,
          "lines_of_code": 31
        },
        {
          "name": "tooltip",
          "path": "frontend/components/ui/tooltip.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 31
        },
        {
          "name": "hover-card",
          "path": "frontend/components/ui/hover-card.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 30
        },
        {
          "name": "layout",
          "path": "frontend/app/layout.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 5,
          "lines_of_code": 30
        },
        {
          "name": "switch",
          "path": "frontend/components/ui/switch.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 30
        },
        {
          "name": "progress",
          "path": "frontend/components/ui/progress.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 29
        },
        {
          "name": "slider",
          "path": "frontend/components/ui/slider.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 3,
          "lines_of_code": 29
        },
        {
          "name": "label",
          "path": "frontend/components/ui/label.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 5,
          "lines_of_code": 27
        },
        {
          "name": "input",
          "path": "frontend/components/ui/input.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 2,
          "lines_of_code": 23
        },
        {
          "name": "textarea",
          "path": "frontend/components/ui/textarea.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 2,
          "lines_of_code": 23
        },
        {
          "name": "use-mobile",
          "path": "frontend/components/ui/use-mobile.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 1,
          "lines_of_code": 20
        },
        {
          "name": "use-mobile",
          "path": "frontend/hooks/use-mobile.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 1,
          "lines_of_code": 20
        },
        {
          "name": "skeleton",
          "path": "frontend/components/ui/skeleton.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 1,
          "lines_of_code": 16
        },
        {
          "name": "page",
          "path": "frontend/app/page.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 2,
          "lines_of_code": 13
        },
        {
          "name": "collapsible",
          "path": "frontend/components/ui/collapsible.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 1,
          "lines_of_code": 12
        },
        {
          "name": "theme-provider",
          "path": "frontend/components/theme-provider.tsx",
          "classes": 0,
          "functions": 1,
          "imports": 2,
          "lines_of_code": 9
        },
        {
          "name": "aspect-ratio",
          "path": "frontend/components/ui/aspect-ratio.tsx",
          "classes": 0,
          "functions": 0,
          "imports": 1,
          "lines_of_code": 8
        },
        {
          "name": "utils",
          "path": "frontend/lib/utils.ts",
          "classes": 0,
          "functions": 1,
          "imports": 3,
          "lines_of_code": 7
        }
      ]
    },
    "codebase_summary": "Contains 2155 nodes\n- 58 files\n- 260 imports\n- 105 external_modules\n- 526 symbols\n\t- 0 classes\n\t- 54 functions\n\t- 441 global_vars\n\t- 7 interfaces\n\nContains 9125 edges\n- 8588 symbol -> used symbol\n- 260 import -> used symbol\n- 274 export -> exported symbol\n    ",
    "timestamp": "2025-07-12T18:18:48.193510",
    "json_file": "codebase_analysis_20250712_181848.json"
  },
  "error": null,
  "processing_time": 1.4132757186889648,
  "timestamp": "2025-07-12T18:18:48.202159"
}