{
  "repository_path": "/tmp/Zeeeepa/codebase-analytics",
  "files_analyzed": 24,
  "total_lines": 12042,
  "total_functions": 336,
  "total_classes": 54,
  "files": [
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualize.py",
      "lines_of_code": 669,
      "functions": [
        {
          "name": "generate_repository_tree",
          "line": 5,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_visualization_data",
          "line": 219,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_issue_visualization",
          "line": 231,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_dead_code_visualization",
          "line": 275,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_call_graph_visualization",
          "line": 312,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_dependency_visualization",
          "line": 361,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_metrics_visualization",
          "line": 398,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_function_context_panels",
          "line": 436,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "create_interactive_ui",
          "line": 483,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_node_color",
          "line": 565,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_dependency_level",
          "line": 575,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "detect_circular_dependencies",
          "line": 578,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_complexity_distribution_chart",
          "line": 583,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_issue_trends",
          "line": 604,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_top_issues",
          "line": 614,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_removal_recommendations",
          "line": 627,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "prioritize_cleanup",
          "line": 648,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_quality_trends",
          "line": 651,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_issue_lines",
          "line": 659,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_total_issues",
          "line": 662,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_dead_code_count",
          "line": 666,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "json"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function generate_repository_tree is very long (213 lines)",
          "line": 5,
          "file": "backend/visualize.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function create_interactive_ui is very long (80 lines)",
          "line": 483,
          "file": "backend/visualize.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/enhanced_reporting.py",
      "lines_of_code": 792,
      "functions": [
        {
          "name": "generate_enhanced_report",
          "line": 754,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 65,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "generate_insights",
          "line": 68,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_group_issues",
          "line": 87,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_generate_security_insights",
          "line": 98,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_generate_performance_insights",
          "line": 135,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_generate_quality_insights",
          "line": 190,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_generate_maintainability_insights",
          "line": 247,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_generate_dead_code_insights",
          "line": 279,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_priority_score",
          "line": 313,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_load_insight_rules",
          "line": 318,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 339,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "record_analysis",
          "line": 343,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_trends",
          "line": 373,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_load_history",
          "line": 421,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_save_history",
          "line": 431,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 450,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "generate_comprehensive_report",
          "line": 454,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "_generate_executive_summary",
          "line": 496,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "_generate_technical_details",
          "line": 547,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_generate_recommendations",
          "line": 567,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_extract_key_findings",
          "line": 597,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_generate_next_steps",
          "line": 609,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_issue_distribution",
          "line": 624,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_calculate_total_effort",
          "line": 648,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_calculate_expected_roi",
          "line": 665,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "export_html_report",
          "line": 673,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_generate_html_report",
          "line": 682,
          "args": 2,
          "has_docstring": true
        }
      ],
      "classes": [
        {
          "name": "ActionableInsight",
          "line": 31,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "TrendData",
          "line": 45,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "InsightGenerator",
          "line": 54,
          "methods": 10,
          "has_docstring": true
        },
        {
          "name": "TrendAnalyzer",
          "line": 328,
          "methods": 5,
          "has_docstring": true
        },
        {
          "name": "ReportGenerator",
          "line": 439,
          "methods": 12,
          "has_docstring": true
        }
      ],
      "imports": [
        "os",
        "json",
        "time",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "collections.defaultdict",
        "collections.Counter",
        "pathlib.Path",
        "analysis.Issue",
        "analysis.IssueCollection",
        "analysis.IssueType",
        "analysis.IssueCategory",
        "analysis.IssueSeverity",
        "performance_optimization.get_optimization_report"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _generate_performance_insights is very long (53 lines)",
          "line": 135,
          "file": "backend/enhanced_reporting.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _generate_quality_insights is very long (55 lines)",
          "line": 190,
          "file": "backend/enhanced_reporting.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _generate_html_report is very long (70 lines)",
          "line": 682,
          "file": "backend/enhanced_reporting.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/analysis.py",
      "lines_of_code": 2856,
      "functions": [
        {
          "name": "detect_implementation_errors",
          "line": 564,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "find_unreachable_code",
          "line": 609,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "find_infinite_loops",
          "line": 675,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "find_off_by_one_errors",
          "line": 749,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "detect_security_vulnerabilities",
          "line": 834,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "detect_circular_dependencies_advanced",
          "line": 1503,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_inheritance_patterns",
          "line": 1614,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_complexity_patterns",
          "line": 1713,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_performance_patterns",
          "line": 1820,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_calculate_inheritance_depth",
          "line": 1925,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_get_inheritance_chain",
          "line": 1940,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_find_unused_inherited_methods",
          "line": 1952,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_has_nested_loops",
          "line": 1966,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_function_context",
          "line": 1999,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_max_call_chain",
          "line": 2004,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_codebase",
          "line": 2026,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__str__",
          "line": 207,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "__post_init__",
          "line": 212,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "__post_init__",
          "line": 246,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_detect_location",
          "line": 275,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_parse_location_string",
          "line": 319,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "update_status",
          "line": 340,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "assign",
          "line": 345,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "add_related_issue",
          "line": 350,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "add_tag",
          "line": 356,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "add_context",
          "line": 362,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "get_category_from_type",
          "line": 367,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "to_dict",
          "line": 408,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__str__",
          "line": 427,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "add_issue",
          "line": 444,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_by_severity",
          "line": 448,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_by_category",
          "line": 452,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_by_type",
          "line": 456,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_by_status",
          "line": 460,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_by_file",
          "line": 464,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_critical_issues",
          "line": 470,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_security_issues",
          "line": 474,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_performance_issues",
          "line": 478,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_dead_code_issues",
          "line": 482,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "count_by_severity",
          "line": 486,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "count_by_category",
          "line": 493,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_summary",
          "line": 500,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "to_dict",
          "line": 513,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__len__",
          "line": 521,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__iter__",
          "line": 525,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__post_init__",
          "line": 548,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 925,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "collect_function_context",
          "line": 928,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "collect_file_context",
          "line": 968,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "collect_issue_context",
          "line": 997,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_function_signature",
          "line": 1032,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_call_chain",
          "line": 1050,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_function_callers",
          "line": 1062,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_function_callees",
          "line": 1077,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_parameter_usage",
          "line": 1092,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_parameter_types",
          "line": 1106,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_calculate_complexity_metrics",
          "line": 1120,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_function_dependencies",
          "line": 1153,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_function_usages",
          "line": 1168,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_related_files",
          "line": 1182,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_assess_code_quality",
          "line": 1207,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_assess_security_implications",
          "line": 1231,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_assess_performance_impact",
          "line": 1254,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_file_imports",
          "line": 1276,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_external_dependencies",
          "line": 1306,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_file_functions",
          "line": 1320,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_file_classes",
          "line": 1334,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_code_structure",
          "line": 1348,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_file_relationships",
          "line": 1370,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_location_context",
          "line": 1385,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_issue_impact",
          "line": 1416,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_generate_fix_suggestions",
          "line": 1448,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "build_graph",
          "line": 2008,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 2040,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_initialize_codebase",
          "line": 2063,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "analyze",
          "line": 2120,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_build_call_graph",
          "line": 2185,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_functions",
          "line": 2199,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_get_function_context",
          "line": 2211,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_dead_code",
          "line": 2280,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_estimate_complexity",
          "line": 2356,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_analyze_parameter_issues",
          "line": 2369,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_type_annotations",
          "line": 2404,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_circular_dependencies",
          "line": 2435,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_implementation_issues",
          "line": 2455,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_is_entry_point",
          "line": 2487,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_calculate_complexity",
          "line": 2492,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_calculate_halstead_metrics_for_function",
          "line": 2506,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_detect_implementation_errors",
          "line": 2545,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_detect_security_vulnerabilities",
          "line": 2554,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_code_quality",
          "line": 2563,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_detect_circular_dependencies_advanced",
          "line": 2629,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_inheritance_patterns",
          "line": 2638,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_complexity_patterns",
          "line": 2647,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_analyze_performance_patterns",
          "line": 2656,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_integrate_performance_optimization",
          "line": 2665,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_generate_comprehensive_report",
          "line": 2685,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_find_most_important_functions",
          "line": 2765,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_generate_statistics",
          "line": 2807,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_generate_summaries",
          "line": 2825,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_calculate_call_graph_metrics",
          "line": 2841,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_codebase_summary",
          "line": 84,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "get_file_summary",
          "line": 85,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "get_class_summary",
          "line": 86,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "get_function_summary",
          "line": 87,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "get_symbol_summary",
          "line": 88,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "sdk_get_function_context",
          "line": 89,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "generate_system_prompt",
          "line": 90,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "generate_flag_system_prompt",
          "line": 91,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "generate_context",
          "line": 92,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "generate_tools",
          "line": 93,
          "args": 0,
          "has_docstring": false
        },
        {
          "name": "generate_flag_tools",
          "line": 94,
          "args": 0,
          "has_docstring": false
        },
        {
          "name": "dfs",
          "line": 1543,
          "args": 2,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "IssueSeverity",
          "line": 100,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "IssueCategory",
          "line": 107,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "IssueType",
          "line": 118,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "IssueStatus",
          "line": 190,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "CodeLocation",
          "line": 199,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "Issue",
          "line": 217,
          "methods": 11,
          "has_docstring": true
        },
        {
          "name": "IssueCollection",
          "line": 439,
          "methods": 16,
          "has_docstring": true
        },
        {
          "name": "FunctionContext",
          "line": 530,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "ContextCollector",
          "line": 922,
          "methods": 26,
          "has_docstring": true
        },
        {
          "name": "ComprehensiveCodebaseAnalyzer",
          "line": 2034,
          "methods": 28,
          "has_docstring": true
        },
        {
          "name": "Codebase",
          "line": 73,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "SourceFile",
          "line": 74,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "Function",
          "line": 75,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "Class",
          "line": 76,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "Symbol",
          "line": 77,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "Import",
          "line": 78,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ExternalModule",
          "line": 79,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "Editable",
          "line": 80,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "CodebaseContext",
          "line": 81,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "ast",
        "re",
        "networkx",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "dataclasses.field",
        "uuid",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "enum.Enum",
        "collections.Counter",
        "collections.defaultdict",
        "pathlib.Path",
        "codegen.sdk.core.codebase.Codebase",
        "codegen.sdk.core.file.SourceFile",
        "codegen.sdk.core.file.File",
        "codegen.sdk.core.function.Function",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.symbol.Symbol",
        "codegen.sdk.core.import_resolution.Import",
        "codegen.sdk.core.external_module.ExternalModule",
        "codegen.sdk.enums.EdgeType",
        "codegen.sdk.enums.SymbolType",
        "codegen.sdk.enums.NodeType",
        "codegen.sdk.core.interfaces.editable.Editable",
        "codegen.sdk.codebase.codebase_analysis.get_codebase_summary",
        "codegen.sdk.codebase.codebase_analysis.get_file_summary",
        "codegen.sdk.codebase.codebase_analysis.get_class_summary",
        "codegen.sdk.codebase.codebase_analysis.get_function_summary",
        "codegen.sdk.codebase.codebase_analysis.get_symbol_summary",
        "codegen.sdk.codebase.codebase_context.CodebaseContext",
        "codegen.sdk.codebase.codebase_context.get_function_context",
        "codegen.sdk.codebase.codebase_ai.generate_system_prompt",
        "codegen.sdk.codebase.codebase_ai.generate_flag_system_prompt",
        "codegen.sdk.codebase.codebase_ai.generate_context",
        "codegen.sdk.codebase.codebase_ai.generate_tools",
        "codegen.sdk.codebase.codebase_ai.generate_flag_tools",
        "performance_optimization.get_optimization_report",
        "performance_optimization._performance_monitor",
        "enhanced_reporting.generate_enhanced_report"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function find_unreachable_code is very long (64 lines)",
          "line": 609,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function find_infinite_loops is very long (72 lines)",
          "line": 675,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function find_off_by_one_errors is very long (83 lines)",
          "line": 749,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function detect_security_vulnerabilities is very long (82 lines)",
          "line": 834,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function detect_circular_dependencies_advanced is very long (109 lines)",
          "line": 1503,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function analyze_inheritance_patterns is very long (97 lines)",
          "line": 1614,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function analyze_complexity_patterns is very long (105 lines)",
          "line": 1713,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function analyze_performance_patterns is very long (101 lines)",
          "line": 1820,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function build_graph missing docstring",
          "line": 2008,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _initialize_codebase is very long (55 lines)",
          "line": 2063,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function analyze is very long (63 lines)",
          "line": 2120,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _get_function_context is very long (67 lines)",
          "line": 2211,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _analyze_dead_code is very long (74 lines)",
          "line": 2280,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _analyze_code_quality is very long (64 lines)",
          "line": 2563,
          "file": "backend/analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _generate_comprehensive_report is very long (78 lines)",
          "line": 2685,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class Codebase missing docstring",
          "line": 73,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class SourceFile missing docstring",
          "line": 74,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class Function missing docstring",
          "line": 75,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class Class missing docstring",
          "line": 76,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class Symbol missing docstring",
          "line": 77,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class Import missing docstring",
          "line": 78,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class ExternalModule missing docstring",
          "line": 79,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class Editable missing docstring",
          "line": 80,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class CodebaseContext missing docstring",
          "line": 81,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function get_codebase_summary missing docstring",
          "line": 84,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function get_file_summary missing docstring",
          "line": 85,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function get_class_summary missing docstring",
          "line": 86,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function get_function_summary missing docstring",
          "line": 87,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function get_symbol_summary missing docstring",
          "line": 88,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function sdk_get_function_context missing docstring",
          "line": 89,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function generate_system_prompt missing docstring",
          "line": 90,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function generate_flag_system_prompt missing docstring",
          "line": 91,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function generate_context missing docstring",
          "line": 92,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function generate_tools missing docstring",
          "line": 93,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function generate_flag_tools missing docstring",
          "line": 94,
          "file": "backend/analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function dfs missing docstring",
          "line": 1543,
          "file": "backend/analysis.py"
        },
        {
          "type": "security",
          "severity": "error",
          "message": "Use of eval() detected - potential security risk",
          "line": 851,
          "file": "backend/analysis.py"
        },
        {
          "type": "security",
          "severity": "error",
          "message": "Use of exec() detected - potential security risk",
          "line": 852,
          "file": "backend/analysis.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/api.py",
      "lines_of_code": 542,
      "functions": [
        {
          "name": "analyze_repository",
          "line": 14,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_repository",
          "line": 45,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "load_codebase",
          "line": 84,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "enhance_analysis_results",
          "line": 264,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "enhance_function_contexts",
          "line": 308,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "categorize_issues_by_type",
          "line": 322,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_severity_distribution",
          "line": 375,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_file_issue_density",
          "line": 386,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "identify_most_problematic_files",
          "line": 398,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "enhance_dead_code_analysis",
          "line": 408,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "assess_function_risk",
          "line": 416,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_refactoring_suggestions",
          "line": 442,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_function_impact",
          "line": 459,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "suggest_test_coverage",
          "line": 467,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_quality_score",
          "line": 481,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_maintainability_index",
          "line": 500,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "calculate_technical_debt_ratio",
          "line": 510,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "prioritize_dead_code_removal",
          "line": 520,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_dead_code_dependencies",
          "line": 526,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_cleanup_recommendations",
          "line": 533,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 89,
          "args": 9,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 102,
          "args": 4,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 109,
          "args": 3,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 115,
          "args": 3,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 120,
          "args": 4,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 128,
          "args": 3,
          "has_docstring": false
        },
        {
          "name": "__init__",
          "line": 134,
          "args": 1,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "MockFunction",
          "line": 88,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MockClass",
          "line": 101,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MockFile",
          "line": 108,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MockParam",
          "line": 114,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MockUsage",
          "line": 119,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MockCall",
          "line": 127,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MockCodebase",
          "line": 133,
          "methods": 1,
          "has_docstring": false
        }
      ],
      "imports": [
        "flask.Flask",
        "flask.jsonify",
        "flask.request",
        "flask_cors.CORS",
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "analysis.analyze_codebase",
        "analysis.ComprehensiveCodebaseAnalyzer",
        "visualize.generate_repository_tree",
        "visualize.generate_visualization_data",
        "visualize.create_interactive_ui",
        "os"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function load_codebase is very long (179 lines)",
          "line": 84,
          "file": "backend/api.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function categorize_issues_by_type is very long (52 lines)",
          "line": 322,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockFunction missing docstring",
          "line": 88,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockClass missing docstring",
          "line": 101,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockFile missing docstring",
          "line": 108,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockParam missing docstring",
          "line": 114,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockUsage missing docstring",
          "line": 119,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockCall missing docstring",
          "line": 127,
          "file": "backend/api.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Class MockCodebase missing docstring",
          "line": 133,
          "file": "backend/api.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function __init__ is very long (127 lines)",
          "line": 134,
          "file": "backend/api.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/comprehensive_testing.py",
      "lines_of_code": 896,
      "functions": [
        {
          "name": "run_comprehensive_tests",
          "line": 865,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 70,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "create_test_repository",
          "line": 74,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_create_implementation_error_file",
          "line": 89,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_create_security_vulnerability_file",
          "line": 117,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_create_performance_issue_file",
          "line": 149,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_create_circular_dependency_files",
          "line": 185,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_create_complex_inheritance_file",
          "line": 216,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_create_dead_code_file",
          "line": 259,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "cleanup",
          "line": 299,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 317,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "run_all_tests",
          "line": 323,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_issue_architecture_tests",
          "line": 355,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_error_detection_tests",
          "line": 436,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_context_collection_tests",
          "line": 519,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_advanced_analysis_tests",
          "line": 555,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_performance_optimization_tests",
          "line": 592,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_integration_tests",
          "line": 694,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_run_regression_tests",
          "line": 734,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_generate_test_report",
          "line": 775,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_generate_test_recommendations",
          "line": 850,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "test_function",
          "line": 660,
          "args": 0,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "TestResult",
          "line": 43,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "TestSuite",
          "line": 52,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "TestDataGenerator",
          "line": 60,
          "methods": 9,
          "has_docstring": true
        },
        {
          "name": "ComprehensiveTestRunner",
          "line": 306,
          "methods": 11,
          "has_docstring": true
        }
      ],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "unittest",
        "tempfile",
        "shutil",
        "datetime.datetime",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "dataclasses.dataclass",
        "pathlib.Path",
        "analysis.ComprehensiveCodebaseAnalyzer",
        "analysis.Issue",
        "analysis.IssueCollection",
        "analysis.IssueType",
        "analysis.IssueCategory",
        "analysis.IssueSeverity",
        "analysis.CodeLocation",
        "analysis.detect_implementation_errors",
        "analysis.detect_security_vulnerabilities",
        "analysis.detect_circular_dependencies_advanced",
        "analysis.analyze_inheritance_patterns",
        "analysis.analyze_complexity_patterns",
        "analysis.analyze_performance_patterns",
        "analysis.ContextCollector",
        "performance_optimization.AnalysisCache",
        "performance_optimization.IncrementalAnalyzer",
        "performance_optimization.PerformanceMonitor",
        "performance_optimization.cached_analysis",
        "performance_optimization.performance_tracked",
        "performance_optimization.get_optimization_report"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _run_issue_architecture_tests is very long (79 lines)",
          "line": 355,
          "file": "backend/comprehensive_testing.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _run_error_detection_tests is very long (81 lines)",
          "line": 436,
          "file": "backend/comprehensive_testing.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _run_performance_optimization_tests is very long (100 lines)",
          "line": 592,
          "file": "backend/comprehensive_testing.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _generate_test_report is very long (73 lines)",
          "line": 775,
          "file": "backend/comprehensive_testing.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function test_function missing docstring",
          "line": 660,
          "file": "backend/comprehensive_testing.py"
        },
        {
          "type": "security",
          "severity": "error",
          "message": "Use of eval() detected - potential security risk",
          "line": 126,
          "file": "backend/comprehensive_testing.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/performance_optimization.py",
      "lines_of_code": 578,
      "functions": [
        {
          "name": "cached_analysis",
          "line": 498,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "performance_tracked",
          "line": 525,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_cache_instance",
          "line": 537,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "get_performance_monitor",
          "line": 541,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "clear_all_caches",
          "line": 545,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "get_optimization_report",
          "line": 550,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "_generate_system_recommendations",
          "line": 558,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 34,
          "args": 3,
          "has_docstring": false
        },
        {
          "name": "_generate_cache_key",
          "line": 44,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_file_hash",
          "line": 59,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get",
          "line": 71,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "set",
          "line": 114,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "_store_in_memory",
          "line": 140,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_is_cache_valid",
          "line": 156,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "clear",
          "line": 172,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_cache_stats",
          "line": 186,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_calculate_hit_ratio",
          "line": 196,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 212,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "get_changed_files",
          "line": 218,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_affected_files",
          "line": 255,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_dependent_files",
          "line": 265,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_dependent_files_recursive",
          "line": 282,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "update_dependency_graph",
          "line": 295,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "get_analysis_stats",
          "line": 326,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 345,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "track_execution",
          "line": 351,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_get_memory_usage",
          "line": 386,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "get_performance_report",
          "line": 395,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_generate_optimization_suggestions",
          "line": 463,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "reset_metrics",
          "line": 487,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "decorator",
          "line": 505,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "decorator",
          "line": 532,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "decorator",
          "line": 353,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "wrapper",
          "line": 507,
          "args": 0,
          "has_docstring": false
        },
        {
          "name": "wrapper",
          "line": 355,
          "args": 0,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "AnalysisCache",
          "line": 23,
          "methods": 10,
          "has_docstring": true
        },
        {
          "name": "IncrementalAnalyzer",
          "line": 202,
          "methods": 7,
          "has_docstring": true
        },
        {
          "name": "PerformanceMonitor",
          "line": 334,
          "methods": 6,
          "has_docstring": true
        }
      ],
      "imports": [
        "os",
        "time",
        "hashlib",
        "pickle",
        "threading",
        "json",
        "functools.wraps",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Set",
        "typing.Callable",
        "typing.Optional",
        "collections.defaultdict",
        "psutil"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function get_performance_report is very long (66 lines)",
          "line": 395,
          "file": "backend/performance_optimization.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function decorator missing docstring",
          "line": 505,
          "file": "backend/performance_optimization.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function decorator missing docstring",
          "line": 532,
          "file": "backend/performance_optimization.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function decorator missing docstring",
          "line": 353,
          "file": "backend/performance_optimization.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function wrapper missing docstring",
          "line": 507,
          "file": "backend/performance_optimization.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function wrapper missing docstring",
          "line": 355,
          "file": "backend/performance_optimization.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/run_analysis.py",
      "lines_of_code": 142,
      "functions": [
        {
          "name": "main",
          "line": 11,
          "args": 0,
          "has_docstring": false
        }
      ],
      "classes": [],
      "imports": [
        "analysis.ComprehensiveCodebaseAnalyzer",
        "json",
        "os",
        "collections.Counter"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function main is very long (128 lines)",
          "line": 11,
          "file": "backend/run_analysis.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function main missing docstring",
          "line": 11,
          "file": "backend/run_analysis.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/simple_analysis.py",
      "lines_of_code": 223,
      "functions": [
        {
          "name": "analyze_python_file",
          "line": 13,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "analyze_repository",
          "line": 116,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "print_analysis_report",
          "line": 160,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "main",
          "line": 200,
          "args": 0,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "os",
        "ast",
        "json",
        "pathlib.Path",
        "collections.Counter",
        "collections.defaultdict",
        "typing.Dict",
        "typing.List",
        "typing.Any"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function analyze_python_file is very long (101 lines)",
          "line": 13,
          "file": "backend/simple_analysis.py"
        },
        {
          "type": "security",
          "severity": "error",
          "message": "Use of eval() detected - potential security risk",
          "line": 86,
          "file": "backend/simple_analysis.py"
        },
        {
          "type": "security",
          "severity": "error",
          "message": "Use of exec() detected - potential security risk",
          "line": 94,
          "file": "backend/simple_analysis.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/tests/test_complete_implementation.py",
      "lines_of_code": 406,
      "functions": [
        {
          "name": "test_step_1_architecture",
          "line": 27,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_2_enhanced_issue_architecture",
          "line": 48,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_3_core_error_detection",
          "line": 85,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_4_context_rich_information",
          "line": 112,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_5_advanced_analysis",
          "line": 130,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_6_performance_optimization",
          "line": 157,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_7_comprehensive_testing",
          "line": 200,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_step_8_enhanced_reporting",
          "line": 234,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_full_integration",
          "line": 282,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "run_complete_test_suite",
          "line": 331,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_function",
          "line": 182,
          "args": 0,
          "has_docstring": false
        }
      ],
      "classes": [],
      "imports": [
        "os",
        "sys",
        "time",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "analysis.ComprehensiveCodebaseAnalyzer",
        "analysis.Issue",
        "analysis.IssueCollection",
        "analysis.IssueType",
        "analysis.IssueCategory",
        "analysis.IssueSeverity",
        "analysis.CodeLocation",
        "analysis.detect_implementation_errors",
        "analysis.detect_security_vulnerabilities",
        "analysis.detect_circular_dependencies_advanced",
        "analysis.ContextCollector",
        "analysis.analyze_inheritance_patterns",
        "analysis.analyze_complexity_patterns",
        "analysis.analyze_performance_patterns",
        "performance_optimization.AnalysisCache",
        "performance_optimization.IncrementalAnalyzer",
        "performance_optimization.PerformanceMonitor",
        "performance_optimization.cached_analysis",
        "performance_optimization.performance_tracked",
        "performance_optimization.get_optimization_report",
        "comprehensive_testing.TestDataGenerator",
        "comprehensive_testing.ComprehensiveTestRunner",
        "comprehensive_testing.TestResult",
        "comprehensive_testing.TestSuite",
        "comprehensive_testing.run_comprehensive_tests",
        "enhanced_reporting.InsightGenerator",
        "enhanced_reporting.TrendAnalyzer",
        "enhanced_reporting.ReportGenerator",
        "enhanced_reporting.ActionableInsight",
        "enhanced_reporting.TrendData",
        "enhanced_reporting.generate_enhanced_report",
        "analysis.ComprehensiveCodebaseAnalyzer"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function run_complete_test_suite is very long (71 lines)",
          "line": 331,
          "file": "tests/test_complete_implementation.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function test_function missing docstring",
          "line": 182,
          "file": "tests/test_complete_implementation.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/tests/test_enhanced_analysis.py",
      "lines_of_code": 414,
      "functions": [
        {
          "name": "test_enhanced_analysis",
          "line": 25,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "test_fallback_mode",
          "line": 103,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "test_issue_collection",
          "line": 274,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "test_context_collection",
          "line": 306,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_test_report",
          "line": 346,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "main",
          "line": 395,
          "args": 0,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "sys",
        "os",
        "time",
        "json",
        "datetime.datetime",
        "analysis.ComprehensiveCodebaseAnalyzer",
        "analysis.IssueCollection",
        "analysis.IssueSeverity",
        "analysis.IssueCategory",
        "analysis.Issue",
        "analysis.IssueCollection",
        "analysis.IssueType",
        "analysis.IssueCategory",
        "analysis.IssueSeverity",
        "analysis.CodeLocation",
        "analysis.detect_implementation_errors",
        "analysis.detect_security_vulnerabilities",
        "analysis.detect_circular_dependencies_advanced",
        "analysis.analyze_inheritance_patterns",
        "analysis.analyze_complexity_patterns",
        "analysis.analyze_performance_patterns",
        "analysis.ContextCollector",
        "analysis.ContextCollector",
        "traceback",
        "traceback"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function test_enhanced_analysis is very long (76 lines)",
          "line": 25,
          "file": "tests/test_enhanced_analysis.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function test_fallback_mode is very long (169 lines)",
          "line": 103,
          "file": "tests/test_enhanced_analysis.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/visualizer.py",
      "lines_of_code": 360,
      "functions": [
        {
          "name": "__init__",
          "line": 92,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_initialize_graph",
          "line": 112,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_add_node",
          "line": 116,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_add_edge",
          "line": 157,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_generate_filename",
          "line": 173,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_save_visualization",
          "line": 192,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "_convert_graph_to_json",
          "line": 240,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_plot_graph",
          "line": 302,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [
        {
          "name": "VisualizationType",
          "line": 28,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "OutputFormat",
          "line": 42,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "VisualizationConfig",
          "line": 53,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "BaseVisualizer",
          "line": 84,
          "methods": 8,
          "has_docstring": true
        }
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "enum.Enum",
        "typing.Any",
        "matplotlib.pyplot",
        "networkx",
        "matplotlib.colors.LinearSegmentedColormap",
        "networkx.drawing.nx_agraph.write_dot"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _convert_graph_to_json is very long (60 lines)",
          "line": 240,
          "file": "backend/visualization/visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _plot_graph is very long (58 lines)",
          "line": 302,
          "file": "backend/visualization/visualizer.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/dependency_trace.py",
      "lines_of_code": 82,
      "functions": [
        {
          "name": "create_dependencies_visualization",
          "line": 25,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "run",
          "line": 56,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "codegen",
        "networkx",
        "codegen.Codebase",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.import_resolution.Import",
        "codegen.sdk.core.symbol.Symbol"
      ],
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/viz_dead_code.py",
      "lines_of_code": 154,
      "functions": [
        {
          "name": "skill_func",
          "line": 114,
          "args": 1,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "DeadCode",
          "line": 99,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        "abc.ABC",
        "networkx",
        "codegen.sdk.core.codebase.CodebaseType",
        "codegen.sdk.core.function.Function",
        "codegen.sdk.core.import_resolution.Import",
        "codegen.sdk.core.symbol.Symbol",
        "codegen.shared.enums.programming_language.ProgrammingLanguage",
        "tests.shared.skills.decorators.skill",
        "tests.shared.skills.decorators.skill_impl",
        "tests.shared.skills.skill.Skill",
        "tests.shared.skills.skill_test.SkillTestCase",
        "tests.shared.skills.skill_test.SkillTestCasePyFile"
      ],
      "issues": [
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function skill_func missing docstring",
          "line": 114,
          "file": "backend/visualization/viz_dead_code.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/method_relationships.py",
      "lines_of_code": 106,
      "functions": [
        {
          "name": "graph_class_methods",
          "line": 28,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "generate_edge_meta",
          "line": 42,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "create_downstream_call_trace",
          "line": 47,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "run",
          "line": 81,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "codegen",
        "networkx",
        "codegen.Codebase",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.detached_symbols.function_call.FunctionCall",
        "codegen.sdk.core.external_module.ExternalModule",
        "codegen.sdk.core.function.Function"
      ],
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/code_visualizer.py",
      "lines_of_code": 568,
      "functions": [
        {
          "name": "__init__",
          "line": 32,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_call_graph",
          "line": 50,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_dependency_graph",
          "line": 167,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_blast_radius",
          "line": 274,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_class_methods",
          "line": 376,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_module_dependencies",
          "line": 471,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "add_calls",
          "line": 91,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "add_dependencies",
          "line": 210,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "add_usages",
          "line": 315,
          "args": 2,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "CodeVisualizer",
          "line": 24,
          "methods": 6,
          "has_docstring": true
        }
      ],
      "imports": [
        "logging",
        "visualizer.BaseVisualizer",
        "visualizer.OutputFormat",
        "visualizer.VisualizationType",
        "matplotlib.pyplot",
        "networkx"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_call_graph is very long (115 lines)",
          "line": 50,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_dependency_graph is very long (105 lines)",
          "line": 167,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_blast_radius is very long (100 lines)",
          "line": 274,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_class_methods is very long (93 lines)",
          "line": 376,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_module_dependencies is very long (97 lines)",
          "line": 471,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function add_calls is very long (59 lines)",
          "line": 91,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function add_calls missing docstring",
          "line": 91,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function add_dependencies missing docstring",
          "line": 210,
          "file": "backend/visualization/code_visualizer.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function add_usages missing docstring",
          "line": 315,
          "file": "backend/visualization/code_visualizer.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/call_trace.py",
      "lines_of_code": 120,
      "functions": [
        {
          "name": "generate_edge_meta",
          "line": 25,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "create_downstream_call_trace",
          "line": 37,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "run",
          "line": 90,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "codegen",
        "networkx",
        "codegen.Codebase",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.detached_symbols.function_call.FunctionCall",
        "codegen.sdk.core.external_module.ExternalModule",
        "codegen.sdk.core.function.Function"
      ],
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/graph_viz_dir_tree.py",
      "lines_of_code": 111,
      "functions": [
        {
          "name": "skill_func",
          "line": 88,
          "args": 1,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "RepoDirTree",
          "line": 78,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        "abc.ABC",
        "networkx",
        "codegen.sdk.core.codebase.CodebaseType",
        "codegen.shared.enums.programming_language.ProgrammingLanguage",
        "tests.shared.skills.decorators.skill",
        "tests.shared.skills.decorators.skill_impl",
        "tests.shared.skills.skill.Skill",
        "tests.shared.skills.skill_test.SkillTestCase",
        "tests.shared.skills.skill_test.SkillTestCasePyFile"
      ],
      "issues": [
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function skill_func missing docstring",
          "line": 88,
          "file": "backend/visualization/graph_viz_dir_tree.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/codebase_visualizer.py",
      "lines_of_code": 1690,
      "functions": [
        {
          "name": "main",
          "line": 1529,
          "args": 0,
          "has_docstring": true
        },
        {
          "name": "__init__",
          "line": 134,
          "args": 5,
          "has_docstring": true
        },
        {
          "name": "_initialize_graph",
          "line": 180,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_add_node",
          "line": 184,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "_add_edge",
          "line": 225,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_generate_filename",
          "line": 241,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "_save_visualization",
          "line": 260,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "_convert_graph_to_json",
          "line": 305,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "_plot_graph",
          "line": 367,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "visualize_call_graph",
          "line": 427,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_dependency_graph",
          "line": 547,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_blast_radius",
          "line": 657,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_class_methods",
          "line": 762,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_module_dependencies",
          "line": 860,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_dead_code",
          "line": 974,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_cyclomatic_complexity",
          "line": 1146,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_issues_heatmap",
          "line": 1245,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_pr_comparison",
          "line": 1354,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "add_calls",
          "line": 471,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "add_dependencies",
          "line": 593,
          "args": 2,
          "has_docstring": false
        },
        {
          "name": "add_usages",
          "line": 701,
          "args": 2,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "VisualizationType",
          "line": 69,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "OutputFormat",
          "line": 83,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "VisualizationConfig",
          "line": 94,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "CodebaseVisualizer",
          "line": 125,
          "methods": 17,
          "has_docstring": true
        }
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "sys",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "enum.Enum",
        "typing.Any",
        "matplotlib.pyplot",
        "networkx",
        "matplotlib.colors.LinearSegmentedColormap",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.codebase.Codebase",
        "codegen.sdk.core.detached_symbols.function_call.FunctionCall",
        "codegen.sdk.core.file.SourceFile",
        "codegen.sdk.core.function.Function",
        "codegen.sdk.core.import_resolution.Import",
        "codegen.sdk.core.symbol.Symbol",
        "codegen.sdk.enums.EdgeType",
        "codegen.sdk.enums.SymbolType",
        "codegen_on_oss.codebase_analyzer.AnalysisType",
        "codegen_on_oss.codebase_analyzer.CodebaseAnalyzer",
        "codegen_on_oss.codebase_analyzer.Issue",
        "codegen_on_oss.codebase_analyzer.IssueSeverity",
        "codegen_on_oss.context_codebase.GLOBAL_FILE_IGNORE_LIST",
        "codegen_on_oss.context_codebase.CodebaseContext",
        "codegen_on_oss.context_codebase.get_node_classes",
        "codegen_on_oss.current_code_codebase.get_selected_codebase",
        "networkx.drawing.nx_agraph.write_dot"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function main is very long (157 lines)",
          "line": 1529,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _convert_graph_to_json is very long (60 lines)",
          "line": 305,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function _plot_graph is very long (58 lines)",
          "line": 367,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_call_graph is very long (118 lines)",
          "line": 427,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_dependency_graph is very long (108 lines)",
          "line": 547,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_blast_radius is very long (103 lines)",
          "line": 657,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_class_methods is very long (96 lines)",
          "line": 762,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_module_dependencies is very long (112 lines)",
          "line": 860,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_dead_code is very long (170 lines)",
          "line": 974,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_cyclomatic_complexity is very long (97 lines)",
          "line": 1146,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_issues_heatmap is very long (107 lines)",
          "line": 1245,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_pr_comparison is very long (171 lines)",
          "line": 1354,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function add_calls is very long (59 lines)",
          "line": 471,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function add_calls missing docstring",
          "line": 471,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function add_dependencies missing docstring",
          "line": 593,
          "file": "backend/visualization/codebase_visualizer.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function add_usages missing docstring",
          "line": 701,
          "file": "backend/visualization/codebase_visualizer.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/graph_viz_foreign_key.py",
      "lines_of_code": 178,
      "functions": [
        {
          "name": "skill_func",
          "line": 100,
          "args": 1,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "ForeignKeyGraph",
          "line": 80,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        "abc.ABC",
        "networkx",
        "codegen.sdk.core.codebase.CodebaseType",
        "codegen.shared.enums.programming_language.ProgrammingLanguage",
        "tests.shared.skills.decorators.skill",
        "tests.shared.skills.decorators.skill_impl",
        "tests.shared.skills.skill.Skill",
        "tests.shared.skills.skill_test.SkillTestCase",
        "tests.shared.skills.skill_test.SkillTestCasePyFile"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function skill_func is very long (77 lines)",
          "line": 100,
          "file": "backend/visualization/graph_viz_foreign_key.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function skill_func missing docstring",
          "line": 100,
          "file": "backend/visualization/graph_viz_foreign_key.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/blast_radius.py",
      "lines_of_code": 118,
      "functions": [
        {
          "name": "generate_edge_meta",
          "line": 27,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "is_http_method",
          "line": 40,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "create_blast_radius_visualization",
          "line": 55,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "run",
          "line": 87,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "codegen",
        "networkx",
        "codegen.Codebase",
        "codegen.sdk.core.dataclasses.usage.Usage",
        "codegen.sdk.python.function.PyFunction",
        "codegen.sdk.python.symbol.PySymbol"
      ],
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/viz_cal_graph.py",
      "lines_of_code": 121,
      "functions": [
        {
          "name": "generate_edge_meta",
          "line": 25,
          "args": 1,
          "has_docstring": true
        },
        {
          "name": "create_downstream_call_trace",
          "line": 37,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "run",
          "line": 90,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [],
      "imports": [
        "codegen",
        "networkx",
        "codegen.Codebase",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.detached_symbols.function_call.FunctionCall",
        "codegen.sdk.core.external_module.ExternalModule",
        "codegen.sdk.core.function.Function"
      ],
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/__init__.py",
      "lines_of_code": 0,
      "functions": [],
      "classes": [],
      "imports": [],
      "issues": []
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/graph_viz_call_graph.py",
      "lines_of_code": 358,
      "functions": [
        {
          "name": "skill_func",
          "line": 64,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "skill_func",
          "line": 197,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "skill_func",
          "line": 292,
          "args": 1,
          "has_docstring": false
        },
        {
          "name": "create_downstream_call_trace",
          "line": 74,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "create_filtered_downstream_call_trace",
          "line": 215,
          "args": 3,
          "has_docstring": false
        },
        {
          "name": "create_downstream_call_trace",
          "line": 300,
          "args": 4,
          "has_docstring": false
        }
      ],
      "classes": [
        {
          "name": "CallGraphFromNode",
          "line": 47,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "CallGraphFilter",
          "line": 183,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "CallPathsBetweenNodes",
          "line": 275,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        "abc.ABC",
        "networkx",
        "codegen.sdk.core.class_definition.Class",
        "codegen.sdk.core.codebase.CodebaseType",
        "codegen.sdk.core.detached_symbols.function_call.FunctionCall",
        "codegen.sdk.core.external_module.ExternalModule",
        "codegen.sdk.core.function.Function",
        "codegen.sdk.core.interfaces.callable.Callable",
        "codegen.shared.enums.programming_language.ProgrammingLanguage",
        "tests.shared.skills.decorators.skill",
        "tests.shared.skills.decorators.skill_impl",
        "tests.shared.skills.skill.Skill",
        "tests.shared.skills.skill_test.SkillTestCase",
        "tests.shared.skills.skill_test.SkillTestCasePyFile"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function skill_func is very long (59 lines)",
          "line": 64,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function skill_func missing docstring",
          "line": 64,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function skill_func is very long (55 lines)",
          "line": 197,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function skill_func missing docstring",
          "line": 197,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function skill_func is very long (65 lines)",
          "line": 292,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function skill_func missing docstring",
          "line": 292,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function create_filtered_downstream_call_trace missing docstring",
          "line": 215,
          "file": "backend/visualization/graph_viz_call_graph.py"
        },
        {
          "type": "documentation",
          "severity": "info",
          "message": "Function create_downstream_call_trace missing docstring",
          "line": 300,
          "file": "backend/visualization/graph_viz_call_graph.py"
        }
      ]
    },
    {
      "file_path": "/tmp/Zeeeepa/codebase-analytics/backend/visualization/analysis_visualizer.py",
      "lines_of_code": 558,
      "functions": [
        {
          "name": "__init__",
          "line": 33,
          "args": 4,
          "has_docstring": true
        },
        {
          "name": "visualize_dead_code",
          "line": 48,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_cyclomatic_complexity",
          "line": 210,
          "args": 2,
          "has_docstring": true
        },
        {
          "name": "visualize_issues_heatmap",
          "line": 299,
          "args": 3,
          "has_docstring": true
        },
        {
          "name": "visualize_pr_comparison",
          "line": 393,
          "args": 1,
          "has_docstring": true
        }
      ],
      "classes": [
        {
          "name": "AnalysisVisualizer",
          "line": 25,
          "methods": 5,
          "has_docstring": true
        }
      ],
      "imports": [
        "logging",
        "visualizer.BaseVisualizer",
        "visualizer.OutputFormat",
        "visualizer.VisualizationType",
        "matplotlib.pyplot",
        "networkx",
        "matplotlib.colors.LinearSegmentedColormap"
      ],
      "issues": [
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_dead_code is very long (160 lines)",
          "line": 48,
          "file": "backend/visualization/analysis_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_cyclomatic_complexity is very long (87 lines)",
          "line": 210,
          "file": "backend/visualization/analysis_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_issues_heatmap is very long (92 lines)",
          "line": 299,
          "file": "backend/visualization/analysis_visualizer.py"
        },
        {
          "type": "code_quality",
          "severity": "warning",
          "message": "Function visualize_pr_comparison is very long (165 lines)",
          "line": 393,
          "file": "backend/visualization/analysis_visualizer.py"
        }
      ]
    }
  ],
  "issues_summary": {
    "code_quality": 61,
    "documentation": 51,
    "security": 5
  },
  "severity_summary": {
    "warning": 61,
    "info": 51,
    "error": 5
  },
  "all_issues": [
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function generate_repository_tree is very long (213 lines)",
      "line": 5,
      "file": "backend/visualize.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function create_interactive_ui is very long (80 lines)",
      "line": 483,
      "file": "backend/visualize.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _generate_performance_insights is very long (53 lines)",
      "line": 135,
      "file": "backend/enhanced_reporting.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _generate_quality_insights is very long (55 lines)",
      "line": 190,
      "file": "backend/enhanced_reporting.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _generate_html_report is very long (70 lines)",
      "line": 682,
      "file": "backend/enhanced_reporting.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function find_unreachable_code is very long (64 lines)",
      "line": 609,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function find_infinite_loops is very long (72 lines)",
      "line": 675,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function find_off_by_one_errors is very long (83 lines)",
      "line": 749,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function detect_security_vulnerabilities is very long (82 lines)",
      "line": 834,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function detect_circular_dependencies_advanced is very long (109 lines)",
      "line": 1503,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function analyze_inheritance_patterns is very long (97 lines)",
      "line": 1614,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function analyze_complexity_patterns is very long (105 lines)",
      "line": 1713,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function analyze_performance_patterns is very long (101 lines)",
      "line": 1820,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function build_graph missing docstring",
      "line": 2008,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _initialize_codebase is very long (55 lines)",
      "line": 2063,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function analyze is very long (63 lines)",
      "line": 2120,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _get_function_context is very long (67 lines)",
      "line": 2211,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _analyze_dead_code is very long (74 lines)",
      "line": 2280,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _analyze_code_quality is very long (64 lines)",
      "line": 2563,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _generate_comprehensive_report is very long (78 lines)",
      "line": 2685,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class Codebase missing docstring",
      "line": 73,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class SourceFile missing docstring",
      "line": 74,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class Function missing docstring",
      "line": 75,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class Class missing docstring",
      "line": 76,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class Symbol missing docstring",
      "line": 77,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class Import missing docstring",
      "line": 78,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class ExternalModule missing docstring",
      "line": 79,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class Editable missing docstring",
      "line": 80,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class CodebaseContext missing docstring",
      "line": 81,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function get_codebase_summary missing docstring",
      "line": 84,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function get_file_summary missing docstring",
      "line": 85,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function get_class_summary missing docstring",
      "line": 86,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function get_function_summary missing docstring",
      "line": 87,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function get_symbol_summary missing docstring",
      "line": 88,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function sdk_get_function_context missing docstring",
      "line": 89,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function generate_system_prompt missing docstring",
      "line": 90,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function generate_flag_system_prompt missing docstring",
      "line": 91,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function generate_context missing docstring",
      "line": 92,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function generate_tools missing docstring",
      "line": 93,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function generate_flag_tools missing docstring",
      "line": 94,
      "file": "backend/analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function dfs missing docstring",
      "line": 1543,
      "file": "backend/analysis.py"
    },
    {
      "type": "security",
      "severity": "error",
      "message": "Use of eval() detected - potential security risk",
      "line": 851,
      "file": "backend/analysis.py"
    },
    {
      "type": "security",
      "severity": "error",
      "message": "Use of exec() detected - potential security risk",
      "line": 852,
      "file": "backend/analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function load_codebase is very long (179 lines)",
      "line": 84,
      "file": "backend/api.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function categorize_issues_by_type is very long (52 lines)",
      "line": 322,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockFunction missing docstring",
      "line": 88,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockClass missing docstring",
      "line": 101,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockFile missing docstring",
      "line": 108,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockParam missing docstring",
      "line": 114,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockUsage missing docstring",
      "line": 119,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockCall missing docstring",
      "line": 127,
      "file": "backend/api.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Class MockCodebase missing docstring",
      "line": 133,
      "file": "backend/api.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function __init__ is very long (127 lines)",
      "line": 134,
      "file": "backend/api.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _run_issue_architecture_tests is very long (79 lines)",
      "line": 355,
      "file": "backend/comprehensive_testing.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _run_error_detection_tests is very long (81 lines)",
      "line": 436,
      "file": "backend/comprehensive_testing.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _run_performance_optimization_tests is very long (100 lines)",
      "line": 592,
      "file": "backend/comprehensive_testing.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _generate_test_report is very long (73 lines)",
      "line": 775,
      "file": "backend/comprehensive_testing.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function test_function missing docstring",
      "line": 660,
      "file": "backend/comprehensive_testing.py"
    },
    {
      "type": "security",
      "severity": "error",
      "message": "Use of eval() detected - potential security risk",
      "line": 126,
      "file": "backend/comprehensive_testing.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function get_performance_report is very long (66 lines)",
      "line": 395,
      "file": "backend/performance_optimization.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function decorator missing docstring",
      "line": 505,
      "file": "backend/performance_optimization.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function decorator missing docstring",
      "line": 532,
      "file": "backend/performance_optimization.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function decorator missing docstring",
      "line": 353,
      "file": "backend/performance_optimization.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function wrapper missing docstring",
      "line": 507,
      "file": "backend/performance_optimization.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function wrapper missing docstring",
      "line": 355,
      "file": "backend/performance_optimization.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function main is very long (128 lines)",
      "line": 11,
      "file": "backend/run_analysis.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function main missing docstring",
      "line": 11,
      "file": "backend/run_analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function analyze_python_file is very long (101 lines)",
      "line": 13,
      "file": "backend/simple_analysis.py"
    },
    {
      "type": "security",
      "severity": "error",
      "message": "Use of eval() detected - potential security risk",
      "line": 86,
      "file": "backend/simple_analysis.py"
    },
    {
      "type": "security",
      "severity": "error",
      "message": "Use of exec() detected - potential security risk",
      "line": 94,
      "file": "backend/simple_analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function run_complete_test_suite is very long (71 lines)",
      "line": 331,
      "file": "tests/test_complete_implementation.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function test_function missing docstring",
      "line": 182,
      "file": "tests/test_complete_implementation.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function test_enhanced_analysis is very long (76 lines)",
      "line": 25,
      "file": "tests/test_enhanced_analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function test_fallback_mode is very long (169 lines)",
      "line": 103,
      "file": "tests/test_enhanced_analysis.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _convert_graph_to_json is very long (60 lines)",
      "line": 240,
      "file": "backend/visualization/visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _plot_graph is very long (58 lines)",
      "line": 302,
      "file": "backend/visualization/visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function skill_func missing docstring",
      "line": 114,
      "file": "backend/visualization/viz_dead_code.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_call_graph is very long (115 lines)",
      "line": 50,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_dependency_graph is very long (105 lines)",
      "line": 167,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_blast_radius is very long (100 lines)",
      "line": 274,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_class_methods is very long (93 lines)",
      "line": 376,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_module_dependencies is very long (97 lines)",
      "line": 471,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function add_calls is very long (59 lines)",
      "line": 91,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function add_calls missing docstring",
      "line": 91,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function add_dependencies missing docstring",
      "line": 210,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function add_usages missing docstring",
      "line": 315,
      "file": "backend/visualization/code_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function skill_func missing docstring",
      "line": 88,
      "file": "backend/visualization/graph_viz_dir_tree.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function main is very long (157 lines)",
      "line": 1529,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _convert_graph_to_json is very long (60 lines)",
      "line": 305,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function _plot_graph is very long (58 lines)",
      "line": 367,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_call_graph is very long (118 lines)",
      "line": 427,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_dependency_graph is very long (108 lines)",
      "line": 547,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_blast_radius is very long (103 lines)",
      "line": 657,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_class_methods is very long (96 lines)",
      "line": 762,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_module_dependencies is very long (112 lines)",
      "line": 860,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_dead_code is very long (170 lines)",
      "line": 974,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_cyclomatic_complexity is very long (97 lines)",
      "line": 1146,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_issues_heatmap is very long (107 lines)",
      "line": 1245,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_pr_comparison is very long (171 lines)",
      "line": 1354,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function add_calls is very long (59 lines)",
      "line": 471,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function add_calls missing docstring",
      "line": 471,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function add_dependencies missing docstring",
      "line": 593,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function add_usages missing docstring",
      "line": 701,
      "file": "backend/visualization/codebase_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function skill_func is very long (77 lines)",
      "line": 100,
      "file": "backend/visualization/graph_viz_foreign_key.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function skill_func missing docstring",
      "line": 100,
      "file": "backend/visualization/graph_viz_foreign_key.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function skill_func is very long (59 lines)",
      "line": 64,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function skill_func missing docstring",
      "line": 64,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function skill_func is very long (55 lines)",
      "line": 197,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function skill_func missing docstring",
      "line": 197,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function skill_func is very long (65 lines)",
      "line": 292,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function skill_func missing docstring",
      "line": 292,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function create_filtered_downstream_call_trace missing docstring",
      "line": 215,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "documentation",
      "severity": "info",
      "message": "Function create_downstream_call_trace missing docstring",
      "line": 300,
      "file": "backend/visualization/graph_viz_call_graph.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_dead_code is very long (160 lines)",
      "line": 48,
      "file": "backend/visualization/analysis_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_cyclomatic_complexity is very long (87 lines)",
      "line": 210,
      "file": "backend/visualization/analysis_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_issues_heatmap is very long (92 lines)",
      "line": 299,
      "file": "backend/visualization/analysis_visualizer.py"
    },
    {
      "type": "code_quality",
      "severity": "warning",
      "message": "Function visualize_pr_comparison is very long (165 lines)",
      "line": 393,
      "file": "backend/visualization/analysis_visualizer.py"
    }
  ]
}